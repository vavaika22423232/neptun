#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
sys.path.append('/Users/vladimirmalik/Desktop/render2')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
from app import clean_text, ensure_city_coords, region_enhanced_coords, classify, UA_CITY_NORMALIZE
import re

# –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ UAV
test_message = """–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞:
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –†—É–∂–∏–Ω
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–µ—Ä–¥–∏—á—ñ–≤
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ß–æ–ø–æ–≤–∏—á—ñ
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ì–æ–ª–æ–≤–∏–Ω–µ
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–∞–ª–∏–Ω
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –û–ª–µ–≤—Å—å–∫

–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞:
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –†—ñ–≤–Ω–µ
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–µ—Ä–µ–∑–Ω–µ 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö–æ—Å—Ç–æ–ø—ñ–ª—å 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ó–∞—Ä—ñ—á–Ω–µ

–í–æ–ª–∏–Ω—å:
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –°–µ–Ω–∫–µ–≤–∏—á—ñ–≤–∫—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –õ—É—Ü—å–∫
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –í–æ–ª–æ–¥–∏–º–∏—Ä 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ì–æ–ª–æ–±–∏
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö–∞–º—ñ–Ω—å-–ö–∞—à–∏—Ä—Å—å–∫–∏–π

‚úô –ù–∞–ø—Ä—è–º–æ–∫ —Ä–∞–∫–µ—Ç ‚úô
‚úô–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–Ω–∞–ª‚úô"""

def test_multi_regional_uav(text):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ multi-regional UAV –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    threats = []
    text_lines = text.split('\n')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ multi-regional UAV —Å–æ–æ–±—â–µ–Ω–∏–µ
    region_count = 0
    uav_count = 0
    for line in text_lines:
        line_lower = line.lower().strip()
        if not line_lower:
            continue
            
        # –°—á–∏—Ç–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
        if any(region in line_lower for region in ['—â–∏–Ω–∞:', '–æ–±–ª–∞—Å—Ç—å:', '–∫—Ä–∞–π:']):
            region_count += 1
        
        # –°—á–∏—Ç–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è UAV
        if '–±–ø–ª–∞' in line_lower and ('–∫—É—Ä—Å' in line_lower or '–Ω–∞ ' in line_lower):
            uav_count += 1
    
    print(f"–†–µ–≥–∏–æ–Ω–æ–≤: {region_count}, UAV —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {uav_count}")
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ UAV, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    if region_count >= 2 and uav_count >= 3:
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç multi-regional UAV")
        
        for line_num, line in enumerate(text_lines, 1):
            line_stripped = line.strip()
            if not line_stripped or ':' in line_stripped[:20]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
                continue
            
            line_lower = line_stripped.lower()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã UAV –∫—É—Ä—Å–∞
            if '–±–ø–ª–∞' in line_lower and ('–∫—É—Ä—Å' in line_lower or ' –Ω–∞ ' in line_lower):
                patterns = [
                    r'(\d+)?[x—Ö]?\s*–±–ø–ª–∞\s+–∫—É—Ä—Å–æ–º?\s+–Ω–∞\s+([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+?)(?:\s|$|[,\.\!\?])',
                    r'–±–ø–ª–∞\s+–∫—É—Ä—Å–æ–º?\s+–Ω–∞\s+([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+?)(?:\s|$|[,\.\!\?])',
                    r'(\d+)?[x—Ö]?\s*–±–ø–ª–∞\s+–Ω–∞\s+([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+?)(?:\s|$|[,\.\!\?])'
                ]
                
                for pattern in patterns:
                    matches = re.finditer(pattern, line_stripped, re.IGNORECASE)
                    for match in matches:
                        if len(match.groups()) == 2:
                            count_str, city_raw = match.groups()
                        else:
                            count_str = None
                            city_raw = match.group(1)
                        
                        if not city_raw:
                            continue
                            
                        # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
                        city_clean = city_raw.strip()
                        city_norm = clean_text(city_clean).lower()
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                        if city_norm in UA_CITY_NORMALIZE:
                            city_norm = UA_CITY_NORMALIZE[city_norm]
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        coords = region_enhanced_coords(city_norm)
                        if not coords:
                            coords = ensure_city_coords(city_norm)
                        
                        if coords:
                            lat, lng = coords[:2]  # –í–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–µ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                            uav_count_num = 1
                            if count_str and count_str.isdigit():
                                uav_count_num = int(count_str)
                            
                            threats.append({
                                'line': line_num,
                                'city': city_clean.title(),
                                'lat': lat,
                                'lng': lng,
                                'count': uav_count_num,
                                'original_line': line_stripped
                            })
                            
                            print(f"  ‚úÖ –°—Ç—Ä–æ–∫–∞ {line_num}: {city_clean} ({uav_count_num}x) -> ({lat}, {lng})")
                        else:
                            print(f"  ‚ùå –°—Ç—Ä–æ–∫–∞ {line_num}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {city_clean}")
    else:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç multi-regional UAV")
    
    return threats

print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê UAV –°–û–û–ë–©–ï–ù–ò–Ø ===")
print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞ multi-regional UAV")
print()

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
result = test_multi_regional_uav(test_message)

print()
print("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê ===")
print(f"–ù–∞–π–¥–µ–Ω–æ —É–≥—Ä–æ–∑: {len(result)}")

if result:
    print()
    print("–î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ì–û–†–û–î–ê –í –†–ï–ó–£–õ–¨–¢–ê–¢–ï:")
    added_cities = ['–∑–∞—Ä—ñ—á–Ω–µ', '—Å–µ–Ω–∫–µ–≤–∏—á—ñ–≤–∫–∞', '–≥–æ–ª–æ–±–∏']
    found_added = []
    
    for threat in result:
        city_name = threat['city']
        if city_name.lower() in added_cities:
            found_added.append(city_name.lower())
            print(f"  ‚úÖ {city_name}: ({threat['lat']}, {threat['lng']})")
    
    print()
    if len(found_added) == 3:
        print("üéâ –í–°–ï 3 –î–û–ë–ê–í–õ–ï–ù–ù–´–• –ì–û–†–û–î–ê –£–°–ü–ï–®–ù–û –û–ë–ù–ê–†–£–ñ–ï–ù–´ –í –ü–ê–†–°–ò–ù–ì–ï!")
    else:
        missing = set(added_cities) - set(found_added)
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {missing}")
else:
    print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
