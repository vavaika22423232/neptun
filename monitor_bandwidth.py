#!/usr/bin/env python3
"""
Bandwidth Monitor - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–º–æ–≥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ Render —Ö–æ—Å—Ç–∏–Ω–≥–µ
"""

import requests
import time
import json
from datetime import datetime, timedelta

class BandwidthMonitor:
    def __init__(self, base_url="https://neptun-alerts.onrender.com"):
        self.base_url = base_url
        self.bandwidth_log = []
        
    def check_response_size(self, endpoint):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
        try:
            url = f"{self.base_url}{endpoint}"
            response = requests.get(url, timeout=10)
            
            size_bytes = len(response.content)
            size_kb = size_bytes / 1024
            
            log_entry = {
                'timestamp': datetime.now().isoformat(),
                'endpoint': endpoint,
                'status_code': response.status_code,
                'size_bytes': size_bytes,
                'size_kb': round(size_kb, 2),
                'headers': dict(response.headers)
            }
            
            self.bandwidth_log.append(log_entry)
            
            print(f"üåê {endpoint}")
            print(f"   Size: {size_kb:.2f} KB ({size_bytes} bytes)")
            print(f"   Status: {response.status_code}")
            print(f"   Compression: {'gzip' if 'gzip' in response.headers.get('Content-Encoding', '') else 'none'}")
            print()
            
            return log_entry
            
        except Exception as e:
            print(f"‚ùå Error checking {endpoint}: {e}")
            return None
    
    def estimate_monthly_usage(self):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–µ—Å—è—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞."""
        if not self.bandwidth_log:
            return
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        avg_size_kb = sum(entry['size_kb'] for entry in self.bandwidth_log) / len(self.bandwidth_log)
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
        requests_per_hour = 100  # –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–∞–π—Ç
        requests_per_day = requests_per_hour * 24
        requests_per_month = requests_per_day * 30
        
        # –†–∞—Å—á–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
        daily_kb = requests_per_day * avg_size_kb
        monthly_kb = requests_per_month * avg_size_kb
        monthly_gb = monthly_kb / (1024 * 1024)
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ($15 –∑–∞ 100GB)
        cost_per_gb = 15 / 100
        estimated_cost = monthly_gb * cost_per_gb
        
        print("üìä –û–¶–ï–ù–ö–ê –ú–ï–°–Ø–ß–ù–û–ì–û –¢–†–ê–§–ò–ö–ê:")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {avg_size_kb:.2f} KB")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {requests_per_day:,}")
        print(f"   –¢—Ä–∞—Ñ–∏–∫ –≤ –¥–µ–Ω—å: {daily_kb/1024:.2f} MB")
        print(f"   –¢—Ä–∞—Ñ–∏–∫ –≤ –º–µ—Å—è—Ü: {monthly_gb:.2f} GB")
        print(f"   –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_cost:.2f}/–º–µ—Å—è—Ü")
        print()
        
        if estimated_cost > 50:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        elif estimated_cost > 20:
            print("‚ö° –£–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã, –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        else:
            print("‚úÖ –ü—Ä–∏–µ–º–ª–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫")
    
    def monitor_endpoints(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã."""
        endpoints = [
            '/',
            '/data',
            '/messages?limit=50',
            '/admin',
            '/static/svg_markers.js'
        ]
        
        print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—á–∞–ª—Å...")
        print("=" * 50)
        
        for endpoint in endpoints:
            self.check_response_size(endpoint)
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        self.estimate_monthly_usage()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        with open('bandwidth_monitor_log.json', 'w', encoding='utf-8') as f:
            json.dump(self.bandwidth_log, f, indent=2, ensure_ascii=False)
        
        print("üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ bandwidth_monitor_log.json")

if __name__ == "__main__":
    monitor = BandwidthMonitor()
    monitor.monitor_endpoints()
