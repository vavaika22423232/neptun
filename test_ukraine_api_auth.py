#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Ukraine Alert API –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
API_TOKEN = "57fe8a39:7698ad50f0f15d502b280a83019bab25"
BASE_URL = "https://api.ukrainealarm.com"

def test_auth_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    endpoints = [
        "/api/v3/alerts/status",
        "/api/v3/regions", 
        "/api/v3/alerts"
    ]
    
    auth_methods = [
        {"Authorization": API_TOKEN},
        {"Authorization": f"Bearer {API_TOKEN}"},
        {"Authorization": f"Token {API_TOKEN}"},
        {"Token": API_TOKEN},
        {"X-API-Key": API_TOKEN},
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    for i, headers in enumerate(auth_methods):
        print(f"\n--- –ú–µ—Ç–æ–¥ {i+1}: {headers} ---")
        
        for endpoint in endpoints:
            try:
                url = f"{BASE_URL}{endpoint}"
                response = requests.get(url, headers=headers, timeout=5)
                
                print(f"  {endpoint}: {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if isinstance(data, list):
                            print(f"    ‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        elif isinstance(data, dict):
                            print(f"    ‚úÖ –û–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: {list(data.keys())}")
                            
                        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        if endpoint == "/api/v3/alerts" and data:
                            print("    üìã –ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–≤–æ–≥–∏:")
                            example = data[0] if isinstance(data, list) else data
                            print(f"    {json.dumps(example, indent=6, ensure_ascii=False)}")
                            
                    except json.JSONDecodeError:
                        print(f"    ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ JSON")
                        
                elif response.status_code == 401:
                    print(f"    ‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                else:
                    print(f"    ‚ö†Ô∏è –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                print(f"  {endpoint}: –û—à–∏–±–∫–∞ - {e}")

def test_public_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    public_endpoints = [
        "/api/v3/regions",
        "/api/v3/alerts/status"
    ]
    
    for endpoint in public_endpoints:
        try:
            url = f"{BASE_URL}{endpoint}"
            response = requests.get(url, timeout=5)
            
            print(f"  {endpoint}: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"    ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    
                    if endpoint == "/api/v3/regions" and data:
                        print("    üìç –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞:")
                        if "states" in data and data["states"]:
                            example = data["states"][0]
                            print(f"    {json.dumps(example, indent=6, ensure_ascii=False)}")
                    
                except json.JSONDecodeError:
                    print(f"    ‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
                    
        except requests.exceptions.RequestException as e:
            print(f"  {endpoint}: –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    test_auth_methods()
    test_public_endpoints()
