#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
sys.path.append('/Users/vladimirmalik/Desktop/render2')

from app import CITY_COORDS

# –ì–æ—Ä–æ–¥–∞ –∏–∑ UAV —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
uav_message_cities = [
    # –ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞
    ("–∂–∏—Ç–æ–º–∏—Ä", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–∫–æ—Ä–Ω–∏–Ω", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"), 
    ("–∫–æ—Ä–æ—Å—Ç–∏—à—ñ–≤", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–º–∞–ª–∏–Ω", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–∫–æ—Ä–æ—Å—Ç–µ–Ω—å", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–∑–≤—è–≥–µ–ª—å", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    
    # –†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞
    ("–∫–ª–µ–≤–∞–Ω—å", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    ("—Ä—ñ–≤–Ω–µ", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    ("–∫–æ—Å—Ç–æ–ø—ñ–ª—å", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    ("–∑–∞—Ä—ñ—á–Ω–µ", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    
    # –•–º–µ–ª—å–Ω–∏—á—á–∏–Ω–∞
    ("–Ω–µ—Ç—ñ—à–∏–Ω", "–•–º–µ–ª—å–Ω–∏—á—á–∏–Ω–∞"),
    
    # –í–æ–ª–∏–Ω—å
    ("–≥–æ–ª–æ–±–∏", "–í–æ–ª–∏–Ω—å"),
    
    # –õ—å–≤—ñ–≤—â–∏–Ω–∞
    ("–¥–æ–±—Ä–æ—Ç–≤—ñ—Ä", "–õ—å–≤—ñ–≤—â–∏–Ω–∞"),
    ("–±—Ä–æ–¥–∏", "–õ—å–≤—ñ–≤—â–∏–Ω–∞"),
]

print("=== –ü–†–û–í–ï–†–ö–ê –ì–û–†–û–î–û–í –ò–ó UAV –°–û–û–ë–©–ï–ù–ò–Ø ===")
print(f"–í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(uav_message_cities)}")
print()

all_found = True
missing_cities = []
found_cities = []

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–≥–∏–æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
regions = {}
for city, region in uav_message_cities:
    if region not in regions:
        regions[region] = []
    regions[region].append(city)

for region, cities in regions.items():
    print(f"üìç {region.upper()}")
    region_found = 0
    
    for city in cities:
        normalized_city = city.lower().strip()
        if normalized_city in CITY_COORDS:
            coords = CITY_COORDS[normalized_city]
            found_cities.append((city, region, coords))
            print(f"  ‚úÖ {city:20}: {coords}")
            region_found += 1
        else:
            missing_cities.append((city, region))
            print(f"  ‚ùå {city:20}: –ù–ï –ù–ê–ô–î–ï–ù")
            all_found = False
    
    print(f"     –ù–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–≥–∏–æ–Ω–µ: {region_found}/{len(cities)}")
    print()

print("=== –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
print(f"–ù–∞–π–¥–µ–Ω–æ: {len(found_cities)}")
print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_cities)}")

if missing_cities:
    print()
    print("–û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ì–û–†–û–î–ê:")
    for city, region in missing_cities:
        print(f"  ‚ùå {city} ({region})")
        
    print()
    print("=== –ü–û–ò–°–ö –ü–û–•–û–ñ–ò–• –ù–ê–ó–í–ê–ù–ò–ô ===")
    for city, region in missing_cities:
        print(f"\n–ü–æ–∏—Å–∫ –¥–ª—è '{city}' ({region}):")
        similar = []
        
        # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö –∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        for db_city in CITY_COORDS.keys():
            if city.lower() in db_city.lower() or db_city.lower() in city.lower():
                similar.append((db_city, CITY_COORDS[db_city]))
        
        if similar:
            for similar_city, coords in similar[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                print(f"  ‚Üí {similar_city}: {coords}")
        else:
            print(f"  –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
else:
    print("üéâ –í–°–ï –ì–û–†–û–î–ê –ù–ê–ô–î–ï–ù–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")

print()
print("=== –ü–û–ö–†–´–¢–ò–ï –ü–û –†–ï–ì–ò–û–ù–ê–ú ===")
for region, cities in regions.items():
    found_in_region = len([c for c in cities if c.lower() in CITY_COORDS])
    percentage = (found_in_region / len(cities)) * 100
    print(f"{region:15}: {found_in_region}/{len(cities)} ({percentage:.1f}%)")

if missing_cities:
    print()
    print("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
    print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤")
    print("–¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ UAV —É–≥—Ä–æ–∑.")
    
print()
print("=== –ù–û–í–´–ï –ì–û–†–û–î–ê –í –≠–¢–û–ú –°–û–û–ë–©–ï–ù–ò–ò ===")
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
previous_cities = [
    '—Ä—É–∂–∏–Ω', '–±–µ—Ä–¥–∏—á—ñ–≤', '—á–æ–ø–æ–≤–∏—á—ñ', '–≥–æ–ª–æ–≤–∏–Ω–µ', '–æ–ª–µ–≤—Å—å–∫',  # –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    '–±–µ—Ä–µ–∑–Ω–µ', '—Å–µ–Ω–∫–µ–≤–∏—á—ñ–≤–∫–∞', '–ª—É—Ü—å–∫', '–≤–æ–ª–æ–¥–∏–º–∏—Ä', '–∫–∞–º—ñ–Ω—å-–∫–∞—à–∏—Ä—Å—å–∫–∏–π'
]

new_cities = []
for city, region in uav_message_cities:
    if city not in previous_cities:
        new_cities.append((city, region))

if new_cities:
    print("–ù–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:")
    for city, region in new_cities:
        status = "‚úÖ" if city.lower() in CITY_COORDS else "‚ùå"
        print(f"  {status} {city} ({region})")
else:
    print("–í—Å–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å —Ä–∞–Ω–µ–µ")
