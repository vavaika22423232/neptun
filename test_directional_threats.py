#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑
"""

def parse_directional_threat(text):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text:
        return None
    
    text_lower = text.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑
    directional_patterns = [
        # "–Ω–∞ —Ö–∞—Ä–∫—ñ–≤—â–∏–Ω–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É —á—É–≥—É—î–≤–∞ –∑—ñ —Å—Ö–æ–¥—É"
        {
            'pattern': r'–Ω–∞\s+(—Ö–∞—Ä–∫—ñ–≤—â–∏–Ω[–∞–∏]|—Ö–∞—Ä–∫—ñ–≤.*?–æ–±–ª–∞—Å—Ç[—å—ñ])\s+.*?–Ω–∞–ø—Ä—è–º–∫[—É–∏]\s+(\w+).*?(–∑—ñ?\s+)?(—Å—Ö–æ–¥[—É–∏]|–∑–∞—Ö–æ–¥[—É–∏]|–ø—ñ–≤–¥[–Ω—è]|–ø—ñ–≤–Ω—ñ—á[—ñ])',
            'region': 'kharkivska',
            'base_city': '—Ö–∞—Ä–∫—ñ–≤'
        },
        # "–Ω–∞ —á–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞ - –≤ –Ω–∞–ø—Ä—è–º–∫—É –Ω.–ø.–ø–æ–Ω–æ—Ä–Ω–∏—Ü—è –∑ –ø—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ —Å—Ö–æ–¥—É"
        {
            'pattern': r'–Ω–∞\s+(—á–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω[–∞–∏]|—á–µ—Ä–Ω—ñ–≥.*?–æ–±–ª–∞—Å—Ç[—å—ñ]).*?–Ω–∞–ø—Ä—è–º–∫[—É–∏]\s+.*?(–ø–æ–Ω–æ—Ä–Ω–∏—Ü[—è—ñ]|–Ω\.–ø\.–ø–æ–Ω–æ—Ä–Ω–∏—Ü[—è—ñ]).*?(–ø—ñ–≤–Ω.*?—Å—Ö–æ–¥|–ø—ñ–≤–Ω—ñ—á–Ω.*?—Å—Ö—ñ–¥)',
            'region': 'chernihivska',
            'base_city': '—á–µ—Ä–Ω—ñ–≥—ñ–≤'
        },
        # "–≥—Ä—É–ø–∞ –≤–æ—Ä–æ–∂–∏—Ö –±–ø–ª–∞ –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –≤—ñ–¥ –º.–∑–∞–ø–æ—Ä—ñ–∂–∂—è"
        {
            'pattern': r'(–≥—Ä—É–ø–∞.*?–±–ø–ª–∞|–±–ø–ª–∞).*?(–Ω–∞\s+)?(.+?)–≤—ñ–¥\s+.*?(–∑–∞–ø–æ—Ä—ñ–∂–∂[—è—ñ])',
            'region': 'zaporizka',
            'base_city': '–∑–∞–ø–æ—Ä—ñ–∂–∂—è'
        }
    ]
    
    import re
    for pattern_info in directional_patterns:
        if re.search(pattern_info['pattern'], text_lower):
            return {
                'region': pattern_info['region'],
                'base_city': pattern_info['base_city'],
                'direction': extract_direction(text_lower),
                'original_text': text
            }
    
    return None

def extract_direction(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    directions = {
        '–∑—ñ —Å—Ö–æ–¥—É': 'east',
        '–∑—ñ –∑–∞—Ö–æ–¥—É': 'west',
        '–∑ –ø—ñ–≤–Ω–æ—á—ñ': 'north',
        '–∑ –ø—ñ–≤–¥–Ω—è': 'south',
        '–∑ –ø—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ —Å—Ö–æ–¥—É': 'northeast',
        '–∑ –ø—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É': 'northwest',
        '–∑ –ø—ñ–≤–¥–µ–Ω–Ω–æ–≥–æ —Å—Ö–æ–¥—É': 'southeast',
        '–∑ –ø—ñ–≤–¥–µ–Ω–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É': 'southwest',
        '–Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ': 'southwest',
        '–Ω–∞ –ø—ñ–≤–Ω—ñ—á–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ': 'northwest',
        '–∫—É—Ä—Å - –ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π': 'northwest',
        '–∫—É—Ä—Å –ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π': 'northwest',
        '–ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π': 'northwest',
        '–ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ': 'southwest'
    }
    
    for phrase, direction in directions.items():
        if phrase in text:
            return direction
    
    return None

def calculate_directional_coords(base_city, direction, distance_km=50):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —É–≥—Ä–æ–∑—ã"""
    city_coords = {
        '—Ö–∞—Ä–∫—ñ–≤': [49.9935, 36.2304],
        '—á–µ—Ä–Ω—ñ–≥—ñ–≤': [51.4982, 31.2893],
        '–∑–∞–ø–æ—Ä—ñ–∂–∂—è': [47.8388, 35.1396]
    }
    
    base_lat = city_coords.get(base_city, [0, 0])[0]
    base_lng = city_coords.get(base_city, [0, 0])[1]
    
    if not base_lat or not base_lng:
        return None
    
    import math
    
    direction_offsets = {
        'north': [distance_km / 111, 0],
        'south': [-distance_km / 111, 0],
        'east': [0, distance_km / (111 * math.cos(base_lat * math.pi / 180))],
        'west': [0, -distance_km / (111 * math.cos(base_lat * math.pi / 180))],
        'northeast': [distance_km / 157, distance_km / (157 * math.cos(base_lat * math.pi / 180))],
        'northwest': [distance_km / 157, -distance_km / (157 * math.cos(base_lat * math.pi / 180))],
        'southeast': [-distance_km / 157, distance_km / (157 * math.cos(base_lat * math.pi / 180))],
        'southwest': [-distance_km / 157, -distance_km / (157 * math.cos(base_lat * math.pi / 180))]
    }
    
    offset = direction_offsets.get(direction)
    if not offset:
        return [base_lat, base_lng]  # Fallback to base city
    
    return [base_lat + offset[0], base_lng + offset[1]]

def test_directional_threats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑"""
    
    test_messages = [
        "–≤–æ—Ä–æ–∂—ñ –±–ø–ª–∞ –Ω–∞ —Ö–∞—Ä–∫—ñ–≤—â–∏–Ω–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É —á—É–≥—É—î–≤–∞ –∑—ñ —Å—Ö–æ–¥—É",
        "–Ω–∞ —á–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞ - –≤ –Ω–∞–ø—Ä—è–º–∫—É –Ω.–ø.–ø–æ–Ω–æ—Ä–Ω–∏—Ü—è –∑ –ø—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ —Å—Ö–æ–¥—É",
        "–≥—Ä—É–ø–∞ –≤–æ—Ä–æ–∂–∏—Ö –±–ø–ª–∞ –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –≤—ñ–¥ –º.–∑–∞–ø–æ—Ä—ñ–∂–∂—è, –∫—É—Ä—Å - –ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π"
    ]
    
    print("üéØ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑")
    print("=" * 65)
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n{i}. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print("-" * 60)
        
        # –ü–∞—Ä—Å–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —É–≥—Ä–æ–∑—É
        threat = parse_directional_threat(message)
        
        if threat:
            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞:")
            print(f"   –†–µ–≥–∏–æ–Ω: {threat['region']}")
            print(f"   –ë–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥: {threat['base_city']}")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {threat['direction']}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords = calculate_directional_coords(threat['base_city'], threat['direction'])
            if coords:
                print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords[0]:.4f}, {coords[1]:.4f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
                city_coords = {
                    '—Ö–∞—Ä–∫—ñ–≤': [49.9935, 36.2304],
                    '—á–µ—Ä–Ω—ñ–≥—ñ–≤': [51.4982, 31.2893],
                    '–∑–∞–ø–æ—Ä—ñ–∂–∂—è': [47.8388, 35.1396]
                }
                
                base = city_coords[threat['base_city']]
                offset_lat = coords[0] - base[0]
                offset_lng = coords[1] - base[1]
                
                print(f"   –°–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {offset_lat:.4f}¬∞, {offset_lng:.4f}¬∞")
                print(f"   –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~50 –∫–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {threat['direction']}")
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        else:
            print("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

if __name__ == "__main__":
    test_directional_threats()
