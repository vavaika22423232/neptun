#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ - 
–∫–æ–≥–¥–∞ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ sys.path —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å app.py
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from app import ensure_city_coords_with_message_context, process_message, OBLAST_CENTERS
    
    def test_oblast_fallback():
        print("=== –¢–µ—Å—Ç fallback –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –æ–±–ª–∞—Å—Ç–∏ ===\n")
        
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ensure_city_coords_with_message_context:")
        
        test_cases = [
            {
                'city': '–Ω–µ–≤—ñ–¥–æ–º–µ–º—ñ—Å—Ç–æ',
                'message': 'üõ∏ –ù–µ–≤—ñ–¥–æ–º–µ–º—ñ—Å—Ç–æ (–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –ë–ø–õ–ê!',
                'expected_oblast': '—Ö–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª.',
                'expected_coords': (46.6354, 32.6169),
                'description': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ –•–µ—Ä—Å–æ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏'
            },
            {
                'city': '—è–∫–µ—Å—å—Å–µ–ª–∏—â–µ',
                'message': 'üí• –Ø–∫–µ—Å—å—Å–µ–ª–∏—â–µ (–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å) –ó–∞–≥—Ä–æ–∑–∞ –æ–±—Å—Ç—Ä—ñ–ª—É!',
                'expected_oblast': '–¥–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
                'expected_coords': (48.4500, 34.9830),
                'description': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–µ–ª–æ –≤ –î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏'
            },
            {
                'city': '—Ç–µ—Å—Ç–æ–≤–µ—á–æ—Ä–Ω–æ–±–∞—ó–≤–∫–∞',
                'message': 'üõ∏ –¢–µ—Å—Ç–æ–≤–µ—á–æ—Ä–Ω–æ–±–∞—ó–≤–∫–∞ (–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –ë–ø–õ–ê!',
                'expected_oblast': '–ª—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.',
                'expected_coords': (49.8397, 24.0297),
                'description': '–¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥ –≤–æ –õ—å–≤–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏'
            }
        ]
        
        for test in test_cases:
            print(f"  –¢–µ—Å—Ç: {test['description']}")
            print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {test['message']}")
            
            coords = ensure_city_coords_with_message_context(test['city'], test['message'])
            
            if coords:
                lat, lon, is_approx = coords
                print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: ({lat}, {lon}), –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ: {is_approx}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏
                expected_lat, expected_lon = test['expected_coords']
                if abs(lat - expected_lat) < 0.1 and abs(lon - expected_lon) < 0.1:
                    print(f"    ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {test['expected_oblast']}")
                else:
                    print(f"    ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: –û–∂–∏–¥–∞–ª–∏—Å—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({expected_lat}, {expected_lon})")
                    
                if is_approx:
                    print(f"    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ (–æ–±–ª–∞—Å—Ç—å)")
                else:
                    print(f"    ‚ö†Ô∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ")
            else:
                print(f"    ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print()
        
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:")
        
        message_tests = [
            {
                'message': 'üõ∏ –ù–µ–≤—ñ–¥–æ–º–µ—Å–µ–ª–∏—â–µ (–û–¥–µ—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –ë–ø–õ–ê!',
                'expected_oblast_coords': (46.4825, 30.7233),  # –û–¥–µ—Å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
                'description': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–µ–ª–æ –≤ –û–¥–µ—Å—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏'
            }
        ]
        
        for test in message_tests:
            print(f"  –¢–µ—Å—Ç: {test['description']}")
            print(f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {test['message']}")
            
            try:
                result = process_message(test['message'], "test_1", "2025-09-13", "test_channel")
                
                if result and len(result) > 0:
                    message_data = result[0]
                    place = message_data.get('place', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                    lat = message_data.get('lat', None)
                    lng = message_data.get('lng', None)
                    
                    print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: –º–µ—Å—Ç–æ={place}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã=({lat}, {lng})")
                    
                    if lat and lng:
                        expected_lat, expected_lon = test['expected_oblast_coords']
                        if abs(lat - expected_lat) < 0.1 and abs(lng - expected_lon) < 0.1:
                            print(f"    ‚úÖ –û–¢–õ–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏!")
                        else:
                            print(f"    ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º ({expected_lat}, {expected_lon})")
                else:
                    print(f"    ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            except Exception as e:
                print(f"    ‚ùå –û–®–ò–ë–ö–ê: {e}")
            print()
        
        print("3. –°–ø—Ä–∞–≤–∫–∞ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤ OBLAST_CENTERS:")
        oblast_keys = sorted(list(OBLAST_CENTERS.keys())[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        for key in oblast_keys:
            lat, lon = OBLAST_CENTERS[key]
            print(f"    '{key}': ({lat}, {lon})")
        print(f"    ... –∏ –µ—â–µ {len(OBLAST_CENTERS) - 10} –æ–±–ª–∞—Å—Ç–µ–π")

    if __name__ == "__main__":
        test_oblast_fallback()

except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ app.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
