#!/usr/bin/env python3
import re

def test_clean_subscription():
    text = """üö®–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞

–í –∑–≤'—è–∑–∫—É –∑ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é –≤–æ—Ä–æ–∂–æ—ó –∞–≤—ñ–∞—Ü—ñ—ó, –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –æ–≥–æ–ª–æ—à–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö:

üî∫–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
üî∫–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å


‚û°–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è
@ukraine_in_alarm_official_bot"""

    print("=== ORIGINAL TEXT ===")
    print(repr(text))
    
    # Clean subscription links
    cleaned_text = text
    if text:
        # markdown links [text](url)
        cleaned_text = re.sub(r'\*\*','', cleaned_text)
        cleaned_text = re.sub(r'\[([^\]]{0,80})\]\((https?://|t\.me/)[^\)]+\)', lambda m: (m.group(1) or '').strip(), cleaned_text, flags=re.IGNORECASE)
        # bare urls
        cleaned_text = re.sub(r'(https?://\S+|t\.me/\S+)', '', cleaned_text, flags=re.IGNORECASE)
        # collapse whitespace and drop empty lines
        cleaned = []
        for ln in cleaned_text.splitlines():
            ln2 = ln.strip()
            if not ln2:
                continue
            # pure decoration (arrows, bullets) or subscribe call to action lines
            if re.fullmatch(r'[>‚û°‚Üí\-\s¬∑‚Ä¢]*', ln2):
                continue
            # remove any line that is just a subscribe CTA or starts with arrow+subscribe
            if re.search(r'(–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å|–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è|–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è|–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ–¥–ø–∏—à–∏—Å—å|subscribe)', ln2, re.IGNORECASE):
                continue
            # remove arrow+subscribe pattern specifically
            if re.search(r'[‚û°‚Üí>]\s*–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è', ln2, re.IGNORECASE):
                continue
            cleaned.append(ln2)
        cleaned_text = '\n'.join(cleaned)
    
    print("\n=== CLEANED TEXT ===")
    print(repr(cleaned_text))
    print("\n=== CLEANED TEXT DISPLAY ===")
    print(cleaned_text)

if __name__ == "__main__":
    test_clean_subscription()
