#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import process_message

def test_numbered_split():
    # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    original = """üõµ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ —Ä—É—Ö—É –≤–æ—Ä–æ–∂–∏—Ö —É–¥–∞—Ä–Ω–∏—Ö –ë–ø–õ–ê:
1. –ë–ø–õ–ê –∑ –∞–∫–≤–∞—Ç–æ—Ä—ñ—ó –ß–æ—Ä–Ω–æ–≥–æ –º–æ—Ä—è –∫—É—Ä—Å–æ–º –Ω–∞ –Ω.–ø.–í–∏–ª–∫–æ–≤–æ (–û–¥–µ—â–∏–Ω–∞);
2. –ë–ø–õ–ê –Ω–∞ —Å—Ö–æ–¥—ñ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∏ –∫—É—Ä—Å–æ–º –Ω–∞ –Ω.–ø.–ë–∞—Ç—É—Ä–∏–Ω.
3. –ë–ø–õ–ê –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∏, –∫—É—Ä—Å - –ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π/–ø—ñ–≤–¥–µ–Ω–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π."""
    
    # –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–∑–±–∏—Ç—Ç—è
    test_variants = [
        ("–û—Ä–∏–≥—ñ–Ω–∞–ª", original),
        ("–†—è–¥–æ–∫ 1", "1. –ë–ø–õ–ê –∑ –∞–∫–≤–∞—Ç–æ—Ä—ñ—ó –ß–æ—Ä–Ω–æ–≥–æ –º–æ—Ä—è –∫—É—Ä—Å–æ–º –Ω–∞ –Ω.–ø.–í–∏–ª–∫–æ–≤–æ (–û–¥–µ—â–∏–Ω–∞)"),
        ("–†—è–¥–æ–∫ 2", "2. –ë–ø–õ–ê –Ω–∞ —Å—Ö–æ–¥—ñ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∏ –∫—É—Ä—Å–æ–º –Ω–∞ –Ω.–ø.–ë–∞—Ç—É—Ä–∏–Ω"),
        ("–†—è–¥–æ–∫ 3", "3. –ë–ø–õ–ê –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∏, –∫—É—Ä—Å - –ø—ñ–≤–¥–µ–Ω–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π/–ø—ñ–≤–¥–µ–Ω–Ω–æ-—Å—Ö—ñ–¥–Ω–∏–π"),
        ("–ë–µ–∑ –Ω–æ–º–µ—Ä—ñ–≤", "–ë–ø–õ–ê –∑ –∞–∫–≤–∞—Ç–æ—Ä—ñ—ó –ß–æ—Ä–Ω–æ–≥–æ –º–æ—Ä—è –∫—É—Ä—Å–æ–º –Ω–∞ –Ω.–ø.–í–∏–ª–∫–æ–≤–æ (–û–¥–µ—â–∏–Ω–∞)"),
        ("–ë–µ–∑ –Ω–æ–º–µ—Ä—ñ–≤ 2", "–ë–ø–õ–ê –Ω–∞ —Å—Ö–æ–¥—ñ –ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∏ –∫—É—Ä—Å–æ–º –Ω–∞ –Ω.–ø.–ë–∞—Ç—É—Ä–∏–Ω"),
    ]
    
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–±–∏—Ç—Ç—è ===")
    
    for name, message in test_variants:
        print(f"\n--- {name}: ---")
        print(f"–¢–µ–∫—Å—Ç: '{message[:100]}{'...' if len(message) > 100 else ''}'")
        
        # –í–∏–∫–ª–∏–∫–∞—Ç–∏ process_message
        tracks = process_message(message, f"test_{name}", "2024-01-01 12:00:00", "test_channel")
        
        if tracks:
            print(f"‚úÖ –ú–∞—Ä–∫–µ—Ä—ñ–≤: {len(tracks)}")
            for j, track in enumerate(tracks, 1):
                place = track.get('place', track.get('name', 'Unknown'))
                lat = track.get('lat')
                lon = track.get('lon', track.get('lng'))
                source = track.get('source_match', 'unknown')
                print(f"  {j}. {place} ({lat}, {lon}) ({source})")
        else:
            print("‚ùå –ú–∞—Ä–∫–µ—Ä–∏ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")

if __name__ == "__main__":
    test_numbered_split()
