#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–¶–µ–ª—å: —É–º–µ–Ω—å—à–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ —Å 1000GB –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
"""

import os
import json
import gzip
from PIL import Image
import subprocess

def optimize_images():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –∫–∞–∫ fallback –¥–ª—è SVG)"""
    print("üé® SVG –º–∞—Ä–∫–µ—Ä—ã –∑–∞–º–µ–Ω—è—é—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    print("   –°—Ç–∞—Ä—ã–µ PNG —Ñ–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    
    static_dir = "static"
    images = [
        "shahed.png", "avia.png", "vidboi.png", "trivoga.png", 
        "pusk.png", "vibuh.png", "fpv.png", "obstril.png", 
        "artillery.png", "rozved.png", "rszv.png", "raketa.png", 
        "mlrs.png", "korabel.png"
    ]
    
    total_saved = 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
    total_png_size = 0
    for img_name in images:
        img_path = os.path.join(static_dir, img_name)
        if os.path.exists(img_path):
            total_png_size += os.path.getsize(img_path)
    
    # SVG –º–∞—Ä–∫–µ—Ä—ã –∑–∞–π–º—É—Ç ~2-3KB –≤–º–µ—Å—Ç–æ PNG
    svg_size = 3 * 1024  # 3KB –¥–ª—è SVG —Ñ–∞–π–ª–∞
    estimated_savings = total_png_size - svg_size
    
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä PNG –º–∞—Ä–∫–µ—Ä–æ–≤: {total_png_size//1024}KB")
    print(f"üìä –†–∞–∑–º–µ—Ä SVG –º–∞—Ä–∫–µ—Ä–æ–≤: {svg_size//1024}KB")  
    print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ SVG: {estimated_savings//1024}KB ({estimated_savings*100//total_png_size}%)")
    
    # –í—Å–µ —Ä–∞–≤–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º PNG –∫–∞–∫ fallback
    for img_name in images:
        img_path = os.path.join(static_dir, img_name)
        if os.path.exists(img_path):
            original_size = os.path.getsize(img_path)
            
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                with Image.open(img_path) as img:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if img.mode in ('RGBA', 'LA', 'P'):
                        img = img.convert('RGB')
                    
                    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                    if img.width > 64 or img.height > 64:  # –ï—â–µ –º–µ–Ω—å—à–µ –¥–ª—è fallback
                        img.thumbnail((64, 64), Image.Resampling.LANCZOS)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                    img.save(img_path, "PNG", optimize=True, quality=75)
                    
                new_size = os.path.getsize(img_path)
                saved = original_size - new_size
                total_saved += saved
                
                print(f"   ‚úÖ {img_name}: {original_size//1024}KB ‚Üí {new_size//1024}KB (fallback)")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {img_name}: {e}")
    
    print(f"\nüéâ –≠–∫–æ–Ω–æ–º–∏—è PNG fallback: {total_saved//1024}KB")
    print(f"üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç SVG: {estimated_savings//1024}KB")
    return estimated_savings  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é —ç–∫–æ–Ω–æ–º–∏—é –æ—Ç SVG

def compress_js_files():
    """–°–∂–∏–º–∞–µ–º JavaScript —Ñ–∞–π–ª—ã"""
    js_files = [
        "static/region_boundaries.js",
        "static/city_boundaries.js", 
        "static/frontend_api_integration.js"
    ]
    
    total_saved = 0
    
    for js_file in js_files:
        if os.path.exists(js_file):
            original_size = os.path.getsize(js_file)
            
            try:
                # –°–æ–∑–¥–∞–µ–º gzip –≤–µ—Ä—Å–∏—é
                gz_file = js_file + ".gz"
                with open(js_file, 'rb') as f_in:
                    with gzip.open(gz_file, 'wb') as f_out:
                        f_out.writelines(f_in)
                
                compressed_size = os.path.getsize(gz_file)
                saved = original_size - compressed_size
                total_saved += saved
                
                print(f"‚úÖ {os.path.basename(js_file)}: {original_size//1024}KB ‚Üí {compressed_size//1024}KB (—Å–∂–∞—Ç–∏–µ {saved*100//original_size}%)")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ {js_file}: {e}")
    
    print(f"\nüéâ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ JS —Ñ–∞–π–ª–∞—Ö: {total_saved//1024}KB")
    return total_saved

def optimize_video():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª"""
    video_path = "static/zbir.MP4"
    if not os.path.exists(video_path):
        print("‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 0
    
    original_size = os.path.getsize(video_path)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        result = subprocess.run(['which', 'ffmpeg'], capture_output=True)
        if result.returncode != 0:
            print("‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install ffmpeg")
            return 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é
        compressed_path = "static/zbir_compressed.MP4"
        cmd = [
            'ffmpeg', '-i', video_path, 
            '-vcodec', 'libx264', '-crf', '28',
            '-preset', 'slow', '-acodec', 'aac', 
            '-b:a', '128k', '-movflags', '+faststart',
            '-y', compressed_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0 and os.path.exists(compressed_path):
            new_size = os.path.getsize(compressed_path)
            if new_size < original_size:
                # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                os.replace(compressed_path, video_path)
                saved = original_size - new_size
                print(f"‚úÖ zbir.MP4: {original_size//1024}KB ‚Üí {new_size//1024}KB (—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {saved//1024}KB)")
                return saved
            else:
                os.remove(compressed_path)
                print("‚ö†Ô∏è –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ: {result.stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
    
    return 0

def create_bandwidth_config():
    """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    config = {
        "max_tracks_default": 50,  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 100
        "max_tracks_limit": 200,   # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 500
        "cache_duration_static": 86400,  # 24 —á–∞—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
        "cache_duration_api": 30,        # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è API
        "gzip_enabled": True,
        "image_optimization": True,
        "api_rate_limit": 60  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    }
    
    with open("bandwidth_config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ bandwidth_config.json")

def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞...\n")
    
    total_saved = 0
    
    print("1Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    total_saved += optimize_images()
    
    print("\n2Ô∏è‚É£ –°–∂–∞—Ç–∏–µ JavaScript —Ñ–∞–π–ª–æ–≤...")
    total_saved += compress_js_files()
    
    print("\n3Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ...")
    total_saved += optimize_video()
    
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    create_bandwidth_config()
    
    print(f"\nüéâ –ò–¢–û–ì–û –°–≠–ö–û–ù–û–ú–õ–ï–ù–û: {total_saved//1024//1024}MB")
    print(f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤ –º–µ—Å—è—Ü: ${(total_saved//1024//1024) * 0.15:.2f}")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∂–∞—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤") 
    print("3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ç—Ä–∞—Ñ–∏–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()
