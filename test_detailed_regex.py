#!/usr/bin/env python3

import re

def test_detailed_regex():
    """Detailed test to understand why regex is not capturing full word"""
    
    test_message = """üõ∏ –ö—É–ø'—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.)
–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!"""
    
    print("=== Detailed Regex Analysis ===")
    print(f"Message: {test_message}")
    print()
    
    # Test character by character
    word = "–ö—É–ø'—è–Ω—Å—å–∫–∏–π"
    print(f"Testing word: '{word}'")
    for i, char in enumerate(word):
        print(f"  {i}: '{char}' (ord: {ord(char)})")
    print()
    
    # Test different regex patterns
    patterns = [
        r'([A-Za-z–ê-–Ø–∞-—è–è—ó–Ü—ñ–Ñ—î“ê“ë\'\-]{4,})\s+—Ä–∞–π–æ–Ω',  # Updated pattern
        r'([A-Za-z–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë\-]{4,})\s+—Ä–∞–π–æ–Ω',   # Original pattern
        r'([^üõ∏\s]+)\s+—Ä–∞–π–æ–Ω',                        # Simpler pattern
        r'(\S+)\s+—Ä–∞–π–æ–Ω',                             # Even simpler
        r'(.*?)\s+—Ä–∞–π–æ–Ω',                             # Greedy
    ]
    
    for i, pattern in enumerate(patterns):
        print(f"Pattern {i+1}: {pattern}")
        match = re.search(pattern, test_message)
        if match:
            print(f"  ‚úÖ Match: '{match.group(1)}'")
        else:
            print(f"  ‚ùå No match")
        print()
    
    # Check if there's something invisible in the string
    print("Hex dump of first line:")
    first_line = test_message.split('\n')[0]
    print(' '.join(f'{ord(c):02x}' for c in first_line))
    print()
    
    # Try to find the exact word boundaries
    print("All matches for word boundaries:")
    word_pattern = r'\b(\w+)\b'
    for match in re.finditer(word_pattern, test_message):
        print(f"  Word: '{match.group(1)}'")

if __name__ == "__main__":
    test_detailed_regex()
