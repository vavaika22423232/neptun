#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º
–ë–ª–æ–∫–∏—Ä—É–µ—Ç IP-–∞–¥—Ä–µ—Å–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º
"""

import json
import requests
import os
from datetime import datetime

def block_high_traffic_ips():
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç IP —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        response = requests.get('http://localhost:5000/admin/bandwidth_stats?token=admin123', timeout=10)
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {response.status_code}")
            return
        
        stats = response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
    blocked_ips_file = 'blocked_ips.json'
    try:
        with open(blocked_ips_file, 'r') as f:
            blocked_ips = set(json.load(f))
    except FileNotFoundError:
        blocked_ips = set()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —Ç—Ä–∞—Ñ–∏–∫–∞
    top_consumers = stats.get('top_consumers', [])
    new_blocks = []
    
    for consumer in top_consumers:
        ip = consumer['ip']
        mb_used = consumer['mb']
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
        # 1. –ë–æ–ª–µ–µ 100MB —Ç—Ä–∞—Ñ–∏–∫–∞ —Å –æ–¥–Ω–æ–≥–æ IP –∑–∞ —á–∞—Å
        # 2. IP –Ω–µ localhost/admin
        if mb_used > 100 and ip not in ['127.0.0.1', 'localhost', '::1']:
            if ip not in blocked_ips:
                blocked_ips.add(ip)
                new_blocks.append(ip)
                print(f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù IP: {ip} (–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {mb_used:.1f}MB)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if new_blocks:
        with open(blocked_ips_file, 'w') as f:
            json.dump(list(blocked_ips), f, indent=2)
        
        print(f"‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {len(new_blocks)} –Ω–æ–≤—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_ips)} IP")
    else:
        print("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

def optimize_app_config():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    config_file = 'bandwidth_config.json'
    
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        response = requests.get('http://localhost:5000/admin/bandwidth_stats?token=admin123', timeout=10)
        if response.status_code == 200:
            stats = response.json()
            total_mb = stats.get('total_mb_sent', 0)
            
            # –ï—Å–ª–∏ —Ç—Ä–∞—Ñ–∏–∫ –≤—ã—Å–æ–∫–∏–π - —É–∂–µ—Å—Ç–æ—á–∞–µ–º –ª–∏–º–∏—Ç—ã
            if total_mb > 500:  # –ë–æ–ª–µ–µ 500MB
                config['max_tracks_default'] = 25  # –£–º–µ–Ω—å—à–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ
                config['max_tracks_limit'] = 100
                config['api_rate_limit'] = 30  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç
                print("üîß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞")
            else:
                config['max_tracks_default'] = 50
                config['max_tracks_limit'] = 200
                config['api_rate_limit'] = 60
                print("üîß –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(config_file, 'w') as f:
                json.dump(config, f, indent=2)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞"""
    
    try:
        response = requests.get('http://localhost:5000/admin/bandwidth_stats?token=admin123', timeout=10)
        if response.status_code != 200:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        stats = response.json()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_mb_sent': stats.get('total_mb_sent', 0),
            'total_gb_sent': stats.get('total_mb_sent', 0) / 1024,
            'active_ips': stats.get('active_ips', 0),
            'top_consumers': stats.get('top_consumers', [])[:10],
            'projected_monthly_gb': (stats.get('total_mb_sent', 0) / 1024) * 30,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
            'status': 'OK' if stats.get('total_mb_sent', 0) < 500 else 'HIGH_USAGE'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f"bandwidth_report_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print(f"üìä –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {report['total_gb_sent']:.2f}GB")
        print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {report['projected_monthly_gb']:.1f}GB")
        
        if report['projected_monthly_gb'] > 15:
            print("üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15GB –≤ –º–µ—Å—è—Ü!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    print("üõ°Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º")
    print("=" * 40)
    
    print("\n1Ô∏è‚É£ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º...")
    block_high_traffic_ips()
    
    print("\n2Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    optimize_app_config()
    
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    generate_report()
    
    print("\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
