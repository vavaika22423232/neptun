#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test multi-regional Shahed message to check why only Dnipro marker is created
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import process_message

def test_multi_regional_shahed():
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –®–∞—Ö–µ–¥–∏ ===")
    
    # –¢–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    test_message = """–Ω–∞ –æ–¥–µ—â–∏–Ω—ñ 10 —à–∞—Ö–µ–¥—ñ–≤ –Ω–∞ –≤–∏–ª–∫–æ–≤–µ
–Ω–∞ –¥–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞ 1 —à–∞—Ö–µ–¥ –Ω–∞ —á–∞–ø–ª–∏–Ω–µ"""
    
    print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{test_message}")
    print("\n" + "="*60)
    
    # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ –æ–∫—Ä–µ–º–æ
    lines = test_message.strip().split('\n')
    print("\n=== –û–ö–†–ï–ú–Ü –¢–ï–°–¢–ò ===")
    
    for i, line in enumerate(lines, 1):
        print(f"\nüìç –†—è–¥–æ–∫ {i}: {line}")
        result = process_message(line.strip(), f"test_line_{i}", "2025-09-08 12:00:00", "test_channel")
        
        if result and isinstance(result, list):
            print(f"  - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ñ–≤: {len(result)}")
            for j, marker in enumerate(result, 1):
                place = marker.get('place', 'N/A')
                coords = (marker.get('lat'), marker.get('lng'))
                icon = marker.get('marker_icon', 'N/A')
                source = marker.get('source_match', 'N/A')
                print(f"    –ú–∞—Ä–∫–µ—Ä {j}: {place} {coords} ({icon}, {source})")
        else:
            print(f"  ‚ùå –ú–∞—Ä–∫–µ—Ä–∏ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
    
    # –¢–µ—Å—Ç—É—î–º–æ –æ–±'—î–¥–Ω–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    print(f"\n=== –û–ë'–Ñ–î–ù–ê–ù–ò–ô –¢–ï–°–¢ ===")
    result = process_message(test_message, "test_combined", "2025-09-08 12:00:00", "test_channel")
    
    if result and isinstance(result, list):
        print(f"\n  - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ñ–≤: {len(result)}")
        
        regions_found = {}
        for i, marker in enumerate(result, 1):
            place = marker.get('place', 'N/A')
            coords = (marker.get('lat'), marker.get('lng'))
            icon = marker.get('marker_icon', 'N/A')
            source = marker.get('source_match', 'N/A')
            
            print(f"    –ú–∞—Ä–∫–µ—Ä {i}: {place} {coords} ({icon}, {source})")
            
            # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏
            place_lower = place.lower()
            if '–≤–∏–ª–∫–æ–≤–µ' in place_lower or '–æ–¥–µ—Å' in place_lower:
                regions_found['–û–¥–µ—â–∏–Ω–∞'] = place
            elif '—á–∞–ø–ª–∏–Ω–µ' in place_lower or '–¥–Ω—ñ–ø—Ä–æ' in place_lower:
                regions_found['–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞'] = place
                
        print(f"\n  üìä –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö:")
        expected_regions = ['–û–¥–µ—â–∏–Ω–∞', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞'] 
        
        for region in expected_regions:
            if region in regions_found:
                print(f"    ‚úÖ {region}: {regions_found[region]}")
            else:
                print(f"    ‚ùå {region}: –ù–ï –ó–ù–ê–ô–î–ï–ù–û")
                
        if len(regions_found) < 2:
            print(f"\n  ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è 2 —Ä–µ–≥—ñ–æ–Ω–∏, –∑–Ω–∞–π–¥–µ–Ω–æ {len(regions_found)}")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if len(result) == 1 and result[0].get('place') == '–î–Ω—ñ–ø—Ä–æ':
            print(f"\n  ‚ùå –û–°–ù–û–í–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –°—Ç–≤–æ—Ä–µ–Ω–∞ —Ç—ñ–ª—å–∫–∏ –º—ñ—Ç–∫–∞ –≤ –î–Ω—ñ–ø—Ä–æ –∑–∞–º—ñ—Å—Ç—å –í–∏–ª–∫–æ–≤–µ —Ç–∞ –ß–∞–ø–ª–∏–Ω–µ")
            
    else:
        print(f"  ‚ùå –ú–∞—Ä–∫–µ—Ä–∏ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")

if __name__ == "__main__":
    test_multi_regional_shahed()
