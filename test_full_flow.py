#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: –æ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
from app import process_message

def test_full_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON"""
    
    test_cases = [
        {
            "text": "–≤–æ—Ä–æ–∂—ñ –±–ø–ª–∞ –Ω–∞ —Ö–∞—Ä–∫—ñ–≤—â–∏–Ω–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É —á—É–≥—É—î–≤–∞ –∑—ñ —Å—Ö–æ–¥—É",
            "description": "–•–∞—Ä—å–∫–æ–≤—â–∏–Ω–∞ ‚Üí –ß—É–≥—É–µ–≤ —Å –≤–æ—Å—Ç–æ–∫–∞"
        },
        {
            "text": "–≥—Ä—É–ø–∞ –≤–æ—Ä–æ–∂–∏—Ö –±–ø–ª–∞ –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –≤—ñ–¥ –º.–∑–∞–ø–æ—Ä—ñ–∂–∂—è, –∫—É—Ä—Å - –ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π",
            "description": "–ë–ü–õ–ê —é–≥–æ-–∑–∞–ø–∞–¥–Ω–µ–µ –ó–∞–ø–æ—Ä–æ–∂—å—è, –∫—É—Ä—Å —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
        }
    ]
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n")
    
    for i, case in enumerate(test_cases, 1):
        print(f"üìù –¢–µ—Å—Ç {i}: {case['description']}")
        print(f"üìÑ –¢–µ–∫—Å—Ç: {case['text']}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º process_message –∫–∞–∫ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
            markers = process_message(
                text=case['text'],
                mid=f"test_{i}",
                date_str="2025-01-23 10:00:00",
                channel="test"
            )
            
            print(f"üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(markers)} –º–∞—Ä–∫–µ—Ä–æ–≤")
            
            for j, marker in enumerate(markers):
                print(f"   –ú–∞—Ä–∫–µ—Ä {j+1}:")
                print(f"   - place: {marker.get('place', 'N/A')}")
                print(f"   - coordinates: [{marker.get('lat', 'N/A')}, {marker.get('lng', 'N/A')}]")
                print(f"   - threat_type: {marker.get('threat_type', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —É–≥—Ä–æ–∑—ã
                if marker.get('directional_threat'):
                    print(f"   ‚úÖ –ù–ê–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –£–ì–†–û–ó–ê:")
                    print(f"      - direction: {marker.get('direction', 'N/A')}")
                    print(f"      - base_coords: {marker.get('base_coords', 'N/A')}")
                else:
                    print(f"   ‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                
                print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        print("-" * 70)
        print()

if __name__ == "__main__":
    test_full_flow()
