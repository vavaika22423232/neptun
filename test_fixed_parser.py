#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
sys.path.append('/Users/vladimirmalik/Desktop/render2')

# –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
test_message = """–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è! | üõ∏ –õ—å–≤—ñ–≤ (–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.)
–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è! | 4—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –î–æ–±—Ä–æ—Ç–≤—ñ—Ä (–º—É–ª—å—Ç–∏—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–µ) | üõ∏ –ë—É—Å—å–∫ (–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.)
–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!"""

print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê ===")
print("–°–æ–æ–±—â–µ–Ω–∏–µ:")
print(test_message)
print()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ)
from app import CITY_COORDS, clean_text, ensure_city_coords, region_enhanced_coords, classify, UA_CITY_NORMALIZE
import re

# –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É single UAV courses
def test_single_uav_courses(text):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–∏–Ω–æ—á–Ω—ã—Ö UAV –∫—É—Ä—Å–æ–≤"""
    threats = []
    
    # Look for UAV course patterns in the entire message
    patterns = [
        r'(\d+)?[x—Ö]?\s*–±–ø–ª–∞\s+–∫—É—Ä—Å–æ–º?\s+–Ω–∞\s+([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+?)(?:\s|[,\.\!\?\|\(])',
        r'–±–ø–ª–∞\s+–∫—É—Ä—Å–æ–º?\s+–Ω–∞\s+([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+?)(?:\s|[,\.\!\?\|\(])',
        r'(\d+)?[x—Ö]?\s*–±–ø–ª–∞\s+–Ω–∞\s+([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+?)(?:\s|[,\.\!\?\|\(])'
    ]
    
    for pattern in patterns:
        matches = re.finditer(pattern, text, re.IGNORECASE)
        for match in matches:
            if len(match.groups()) == 2:
                count_str, city_raw = match.groups()
            else:
                count_str = None
                city_raw = match.group(1)
            
            if not city_raw:
                continue
                
            # Clean and normalize city name
            city_clean = city_raw.strip()
            city_norm = clean_text(city_clean).lower()
            
            # Apply normalization rules
            if city_norm in UA_CITY_NORMALIZE:
                city_norm = UA_CITY_NORMALIZE[city_norm]
            
            # Try to get coordinates
            coords = region_enhanced_coords(city_norm)
            if not coords:
                coords = ensure_city_coords(city_norm)
            
            if coords:
                lat, lng = coords[:2]
                
                # Extract count if present
                uav_count_num = 1
                if count_str and count_str.isdigit():
                    uav_count_num = int(count_str)
                
                threat = {
                    'place': city_clean.title(),
                    'lat': lat,
                    'lng': lng,
                    'text': f"–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ {city_clean} ({uav_count_num}x)",
                    'count': uav_count_num
                }
                threats.append(threat)
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω UAV –∫—É—Ä—Å: {city_clean} ({uav_count_num}x) -> ({lat}, {lng})")
            else:
                print(f"‚ùå UAV –∫—É—Ä—Å: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {city_clean}")
    
    return threats

# –¢–µ—Å—Ç–∏—Ä—É–µ–º
print("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò SINGLE UAV COURSES ===")
uav_threats = test_single_uav_courses(test_message)

if uav_threats:
    print(f"\n–ù–∞–π–¥–µ–Ω–æ UAV —É–≥—Ä–æ–∑: {len(uav_threats)}")
    for threat in uav_threats:
        print(f"  ‚Ä¢ {threat['place']}: ({threat['lat']}, {threat['lng']}) - {threat['count']}x –ë–ø–õ–ê")
    
    print("\n=== –ü–†–û–í–ï–†–ö–ê –î–û–ë–†–û–¢–í–û–†–ê ===")
    dobrotvor_found = any('–¥–æ–±—Ä–æ—Ç–≤—ñ—Ä' in threat['place'].lower() for threat in uav_threats)
    if dobrotvor_found:
        print("‚úÖ –î–æ–±—Ä–æ—Ç–≤—ñ—Ä –Ω–∞–π–¥–µ–Ω –∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–µ—Ç–∫–∞!")
    else:
        print("‚ùå –î–æ–±—Ä–æ—Ç–≤—ñ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    print("\n=== –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    print("–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å:")
    print("1. –ú–µ—Ç–∫—É –¥–ª—è –õ—å–≤–æ–≤–∞ (–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è)")
    print("2. –ú–µ—Ç–∫—É –¥–ª—è –ë—É—Å—å–∫–∞ (–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è)")  
    print("3. –ú–µ—Ç–∫—É –¥–ª—è –î–æ–±—Ä–æ—Ç–≤–æ—Ä–∞ (–∏–∑ UAV –∫—É—Ä—Å–∞)")
    print("–ò—Ç–æ–≥–æ: 3 –º–µ—Ç–∫–∏ –≤–º–µ—Å—Ç–æ 1")
    
else:
    print("‚ùå UAV —É–≥—Ä–æ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –î–æ–±—Ä–æ—Ç–≤–æ—Ä–∞")
