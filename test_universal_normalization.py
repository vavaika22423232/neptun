#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test universal Ukrainian toponym normalization
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import normalize_ukrainian_toponym, spacy_enhanced_geocoding, SPACY_AVAILABLE

def test_universal_normalization():
    """Test the universal normalization logic"""
    
    print("üß† Testing Universal Ukrainian Toponym Normalization")
    print("=" * 60)
    
    test_cases = [
        # Adjective ‚Üí City patterns
        ('—á–∫–∞–ª–æ–≤—Å—å–∫–∏–π', '–ß–∫–∞–ª–æ–≤—Å—å–∫–µ', 'Acc', '—á–∫–∞–ª–æ–≤—Å—å–∫–µ'),
        ('–ø–æ–∫—Ä–æ–≤—Å—å–∫–∏–π', '–ü–æ–∫—Ä–æ–≤—Å—å–∫', 'Nom', '–ø–æ–∫—Ä–æ–≤—Å—å–∫'),
        ('–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫–∏–π', '–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫—É', 'Loc', '–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫'),
        ('—Å–ª–æ–≤\'—è–Ω—Å—å–∫–∏–π', '–°–ª–æ–≤\'—è–Ω—Å—å–∫', 'Acc', '—Å–ª–æ–≤\'—è–Ω—Å—å–∫'),
        ('–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π', '–ù–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫', 'Nom', '–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫'),
        
        # Case-specific fixes
        ('–∑–∞—Ä—ñ—á–Ω–∏–π', '–ó–∞—Ä—ñ—á–Ω–æ–≥–æ', 'Gen', '–∑–∞—Ä—ñ—á–Ω–µ'),
        ('–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º', '–ù–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º', 'Ins', '–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫'),
        
        # Feminine places
        ('—Å–∞–≤–∏–Ω–∫–∞', '–°–∞–≤–∏–Ω—Ü—ñ', 'Nom', '—Å–∞–≤–∏–Ω—Ü—ñ'),
        ('–º–∏–∫–æ–ª–∞—ó–≤–∫–∞', '–ú–∏–∫–æ–ª–∞—ó–≤–∫—É', 'Acc', '–º–∏–∫–æ–ª–∞—ó–≤–∫–∞'),
        
        # Should remain unchanged
        ('–∫–∏—ó–≤', '–ö–∏—ó–≤', 'Nom', '–∫–∏—ó–≤'),
        ('—Ö–∞—Ä–∫—ñ–≤', '–•–∞—Ä–∫—ñ–≤', 'Nom', '—Ö–∞—Ä–∫—ñ–≤'),
        ('–ø–æ–ª—Ç–∞–≤–∞', '–ü–æ–ª—Ç–∞–≤—É', 'Acc', '–ø–æ–ª—Ç–∞–≤–∞'),
    ]
    
    print("üîç Direct normalization function tests:")
    for lemma, original, case, expected in test_cases:
        result = normalize_ukrainian_toponym(lemma, original, case)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} '{lemma}' (from '{original}', {case}) ‚Üí '{result}' (expected: '{expected}')")
    
    print(f"\nüéØ Testing with actual SpaCy processing:")
    
    spacy_test_messages = [
        '1 –ë–ø–õ–ê –Ω–∞ –ß–∫–∞–ª–æ–≤—Å—å–∫–µ',
        '–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ü–æ–∫—Ä–æ–≤—Å—å–∫', 
        '–£–¥–∞—Ä –ø–æ –ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫—É',
        '–ê—Ç–∞–∫–∞ –Ω–∞ –°–ª–æ–≤\'—è–Ω—Å—å–∫',
        '–û–±—Å—Ç—Ä—ñ–ª –ó–∞—Ä—ñ—á–Ω–æ–≥–æ',
        '–ë–ø–õ–ê –Ω–∞–¥ –ù–æ–≤–æ—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º',
        '–í–∏–±—É—Ö–∏ –≤ –ú–∏–∫–æ–ª–∞—ó–≤—Ü—ñ',
    ]
    
    if SPACY_AVAILABLE:
        for message in spacy_test_messages:
            print(f"\nüìù Message: '{message}'")
            results = spacy_enhanced_geocoding(message)
            
            for result in results:
                if result['coords']:
                    lat, lng = result['coords']
                    print(f"  ‚úÖ {result['name']} ‚Üí {result['normalized']} ({lat:.4f}, {lng:.4f})")
                    print(f"     Source: {result['source']}, Case: {result.get('case', 'N/A')}")
    else:
        print("‚ö†Ô∏è SpaCy not available - skipping integration tests")

def test_pattern_coverage():
    """Test how many different patterns the universal logic covers"""
    
    print(f"\nüìä Pattern Coverage Analysis")
    print("=" * 40)
    
    # Test various Ukrainian city name patterns
    pattern_examples = [
        # -—Å—å–∫–∏–π pattern cities
        '–¥–æ–Ω–µ—Ü—å–∫–∏–π', '–ª—É–≥–∞–Ω—Å—å–∫–∏–π', '—Ö–∞—Ä–∫—ñ–≤—Å—å–∫–∏–π', '–∫–∏—ó–≤—Å—å–∫–∏–π',
        # -—Ü—å–∫–∏–π pattern cities  
        '–≤—ñ–Ω–Ω–∏—Ü—å–∫–∏–π', '—Ö–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π', '–∂–∏—Ç–æ–º–∏—Ä—Å—å–∫–∏–π',
        # Complex compounds
        '–∫–∞–º\'—è–Ω—Å—å–∫–∏–π', '–æ–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤—Å—å–∫–∏–π', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª—ñ–≤—Å—å–∫–∏–π',
        # Instrumental cases
        '–ø–æ–∫—Ä–æ–≤—Å—å–∫–æ–º', '–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫–æ–º', '–∫–æ—Å—Ç—è–Ω—Ç–∏–Ω—ñ–≤—Å—å–∫–æ–º',
        # Genitive cases
        '–±–∞—Ö–º—É—Ç—Å—å–∫–∏–π', '–∞—Ä—Ç–µ–º—ñ–≤—Å—å–∫–∏–π', '–≥–æ—Ä–ª—ñ–≤—Å—å–∫–∏–π',
    ]
    
    print("üîç Testing pattern recognition:")
    for test_name in pattern_examples:
        result = normalize_ukrainian_toponym(test_name, test_name.title(), 'Test')
        if result != test_name:
            print(f"  üîÑ '{test_name}' ‚Üí '{result}'")
        else:
            print(f"  ‚ûñ '{test_name}' ‚Üí unchanged")

if __name__ == "__main__":
    test_universal_normalization()
    test_pattern_coverage()
