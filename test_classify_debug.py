#!/usr/bin/env python3
import sys
sys.path.append('.')
from app import process_message

def test_classify_function():
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é classify...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é classify –∏–∑ –º–æ–¥—É–ª—è app
    import app
    
    test_message = "üöÄ–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å (–°–∏–Ω–µ–ª—å–Ω–∏–∫—ñ–≤—Å—å–∫–∏–π —Ä-–Ω) - –∑–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–≤—ñ–∞—Ü—ñ–π–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤ —É—Ä–∞–∂–µ–Ω–Ω—è!"
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(f"{repr(test_message)}")
    print()
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é classify
    # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ process_message
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    l = test_message.lower()
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç üöÄ: {'üöÄ' in test_message}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '–∞–≤—ñ–∞—Ü—ñ–π–Ω': {'–∞–≤—ñ–∞—Ü—ñ–π–Ω' in l}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '–∑–∞—Å–æ–±': {'–∑–∞—Å–æ–±' in l}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '—É—Ä–∞–∂': {'—É—Ä–∞–∂' in l}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '–±–ø–ª–∞': {'–±–ø–ª–∞' in l}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '–¥—Ä–æ–Ω': {'–¥—Ä–æ–Ω' in l}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '—à–∞—Ö–µ–¥': {'—à–∞—Ö–µ–¥' in l}")
    
    print(f"\nüîç –õ–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ë–ü–õ–ê/–¥—Ä–æ–Ω—ã: {any(k in l for k in ['shahed','—à–∞—Ö–µ–¥','—à–∞—Ö–µ–¥—ñ','—à–∞—Ö–µ–¥—ñ–≤','geran','–≥–µ—Ä–∞–Ω—å','–¥—Ä–æ–Ω','–¥—Ä–æ–Ω–∏','–±–ø–ª–∞','uav'])}")
    print(f"   2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤–∏–∞—Ü–∏—é: {('–∞–≤—ñ–∞—Ü—ñ–π–Ω' in l and ('–∑–∞—Å–æ–±' in l or '—É—Ä–∞–∂' in l))}")
    print(f"   3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∫–µ—Ç—ã (üöÄ): {'üöÄ' in test_message}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–∫–æ–π
    print(f"\nüîç –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    result = process_message(test_message, "test_mid", "2024-09-14", "test_channel")
    
    if result and len(result) > 0:
        threat = result[0]
        threat_type = threat.get('threat_type', 'N/A')
        icon = threat.get('marker_icon', 'N/A')
        source = threat.get('source_match', 'N/A')
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"   - –¢–∏–ø —É–≥—Ä–æ–∑—ã: {threat_type}")
        print(f"   - –ò–∫–æ–Ω–∫–∞: {icon}")
        print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")

if __name__ == "__main__":
    test_classify_function()
