#!/usr/bin/env python3

import sys
import os
import re
sys.path.append(os.path.dirname(__file__))

from app import RAION_FALLBACK

def test_regex_match():
    """Test the regex pattern that should catch –ö—É–ø'—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω"""
    
    test_message = """üõ∏ –ö—É–ø'—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.)
–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!"""
    
    print("=== Testing Regex Pattern ===")
    print(f"Message: {test_message}")
    print()
    
    # Test the exact regex from the code (FIXED VERSION)
    pattern = r'([A-Za-z–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë\'\-]{4,})\s+—Ä–∞–π–æ–Ω\s*\(([^)]*–æ–±–ª[^)]*)\)'
    match = re.search(pattern, test_message)
    
    if match:
        print("‚úÖ Regex MATCHED!")
        print(f"Group 1 (raion_token): '{match.group(1)}'")
        print(f"Group 2 (oblast): '{match.group(2)}'")
        
        raion_token = match.group(1).strip().lower()
        print(f"Raion token lowercase: '{raion_token}'")
        
        # Test normalization
        raion_base = re.sub(r'(—Å—å–∫–æ–º—É|—Å–∫–æ–≥–æ|—Å—å–∫–æ–≥–æ|—Å–∫–∏–π|—Å—å–∫i–π|—Å—å–∫–æ–π|—Å—å–∫–∏–º|—Å–∫–æ–º)$', '—Å—å–∫–∏–π', raion_token)
        print(f"Normalized raion_base: '{raion_base}'")
        
        # Check if in RAION_FALLBACK
        if raion_base in RAION_FALLBACK:
            coords = RAION_FALLBACK[raion_base]
            print(f"‚úÖ Found in RAION_FALLBACK: {coords}")
        else:
            print(f"‚ùå NOT found in RAION_FALLBACK")
            print(f"Available keys with '–∫—É–ø': {[k for k in RAION_FALLBACK.keys() if '–∫—É–ø' in k]}")
            
    else:
        print("‚ùå Regex DID NOT MATCH")
        print("Testing individual components...")
        
        # Test if the first part matches
        part1_pattern = r'([A-Za-z–ê-–Ø–∞-—è–á—ó–Ü—ñ–Ñ—î“ê“ë\-]{4,})\s+—Ä–∞–π–æ–Ω'
        part1_match = re.search(part1_pattern, test_message)
        if part1_match:
            print(f"‚úÖ First part matches: '{part1_match.group(1)}'")
        else:
            print("‚ùå First part doesn't match")
        
        # Test if parentheses part matches
        part2_pattern = r'\(([^)]*–æ–±–ª[^)]*)\)'
        part2_match = re.search(part2_pattern, test_message)
        if part2_match:
            print(f"‚úÖ Second part matches: '{part2_match.group(1)}'")
        else:
            print("‚ùå Second part doesn't match")

if __name__ == "__main__":
    test_regex_match()
