#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –º—É–ª—å—Ç–∏—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö UAV —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import sys
import re

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
sys.path.insert(0, '.')

from app import process_message

def test_multi_regional_uav():
    """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ –ë–ø–õ–ê"""
    
    test_message = """**–°—É–º—â–∏–Ω–∞:**
5—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö–æ–Ω–æ—Ç–æ–ø
**–ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞:**
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–∞—Ç—É—Ä–∏–Ω
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ù–æ–≤–≥–æ—Ä–æ–¥-–°—ñ–≤–µ—Ä—Å—å–∫–∏–π
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–µ–Ω—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –°–Ω–æ–≤—Å—å–∫
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–∞—Ö–º–∞—á
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ì–æ–Ω—á–∞—Ä—ñ–≤—Å—å–∫–µ
**–ö–∏—ó–≤—â–∏–Ω–∞:**
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ü—ñ—Å–∫—ñ–≤–∫—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–æ—Ä–∏—Å–ø—ñ–ª—å
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –í–µ–ª–∏–∫—É –î–∏–º–µ—Ä–∫—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –î–∏–º–µ—Ä
**–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å:**
7—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ó–∞–ø–æ—Ä—ñ–∂–∂—è
**–ú–∏–∫–æ–ª–∞—ó–≤—â–∏–Ω–∞:**
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤
–ù–∞–ø—Ä—è–º–æ–∫ —Ä–∞–∫–µ—Ç
–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–Ω–∞–ª | –°—É–º—â–∏–Ω–∞ ‚Äî 6 –ë–ø–õ–ê –Ω–∞ –ö–æ–Ω–æ—Ç–æ–ø"""

    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—É–ª—å—Ç–∏—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ UAV —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print("=" * 60)
    
    try:
        result = process_message(test_message, "test_123", "2024-01-01 10:00:00", "test_channel")
        
        if result:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} –∑–∞–≥—Ä–æ–∑ –∑–Ω–∞–π–¥–µ–Ω–æ")
            print("\nüìç –°—Ç–≤–æ—Ä–µ–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏:")
            for i, threat in enumerate(result, 1):
                place = threat.get('place', 'Unknown')
                lat = threat.get('lat', 0)
                lng = threat.get('lng', 0)
                source = threat.get('source_match', 'unknown')
                count = threat.get('count', 1)
                print(f"  {i}. {place} ({count}x) - {lat:.4f}, {lng:.4f} [{source}]")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –≥–æ—Ä–æ–¥–∞
            expected_cities = [
                '–ö–æ–Ω–æ—Ç–æ–ø', '–ë–∞—Ç—É—Ä–∏–Ω', '–ù–æ–≤–≥–æ—Ä–æ–¥-–°—ñ–≤–µ—Ä—Å—å–∫–∏–π', '–ú–µ–Ω–∞', '–°–Ω–æ–≤—Å—å–∫', 
                '–ë–∞—Ö–º–∞—á', '–ì–æ–Ω—á–∞—Ä—ñ–≤—Å—å–∫–µ', '–ü—ñ—Å–∫—ñ–≤–∫–∞', '–ë–æ—Ä–∏—Å–ø—ñ–ª—å', '–í–µ–ª–∏–∫–∞ –î–∏–º–µ—Ä–∫–∞',
                '–î–∏–º–µ—Ä', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ú–∏–∫–æ–ª–∞—ó–≤'
            ]
            
            found_places = [threat.get('place', '') for threat in result]
            missing_cities = [city for city in expected_cities if not any(city.lower() in place.lower() for place in found_places)]
            
            if missing_cities:
                print(f"\n‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {missing_cities}")
            else:
                print(f"\nüéØ –£—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω—ñ –º—ñ—Å—Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                
        else:
            print("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_multi_regional_uav()
