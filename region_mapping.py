#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ Ukraine Alert API –∫ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

import logging
from ukraine_alert_api import ukraine_api

log = logging.getLogger(__name__)

# –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤ API -> –Ω–∞—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
REGION_NAME_MAPPING = {
    # –û–±–ª–∞—Å—Ç–∏ (–ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–í—ñ–Ω–Ω–∏—Ü—è",
    "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–õ—É—Ü—å–∫", 
    "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–î–Ω—ñ–ø—Ä–æ",
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–î–æ–Ω–µ—Ü—å–∫",
    "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ñ–∏—Ç–æ–º–∏—Ä",
    "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–£–∂–≥–æ—Ä–æ–¥",
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è",
    "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ö–∏—ó–≤",
    "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π",
    "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–õ—É–≥–∞–Ω—Å—å–∫",
    "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–õ—å–≤—ñ–≤",
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ú–∏–∫–æ–ª–∞—ó–≤",
    "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–û–¥–µ—Å–∞",
    "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ü–æ–ª—Ç–∞–≤–∞",
    "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–†—ñ–≤–Ω–µ",
    "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–°—É–º–∏",
    "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å",
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–•–∞—Ä–∫—ñ–≤",
    "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–•–µ—Ä—Å–æ–Ω",
    "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π",
    "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ß–µ—Ä–∫–∞—Å–∏",
    "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ",
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤",
    
    # –†–∞–π–æ–Ω–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∏–π —Ä–∞–π–æ–Ω": "–í—ñ–Ω–Ω–∏—Ü—è",
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–•–∞—Ä–∫—ñ–≤",
    "–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–î–Ω—ñ–ø—Ä–æ", 
    "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ü–æ–ª—Ç–∞–≤–∞",
    "–°—É–º—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–°—É–º–∏",
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤",
    "–ö—Ä–µ–º–µ–Ω—á—É—Ü—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ö—Ä–µ–º–µ–Ω—á—É–∫",
    "–ü–∞–≤–ª–æ–≥—Ä–∞–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ü–∞–≤–ª–æ–≥—Ä–∞–¥",
    "–Ü–∑—é–º—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–Ü–∑—é–º",
    "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å—å–∫",
    "–õ–æ–∑—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–õ–æ–∑–æ–≤–∞",
    "–ö—Ä–∞—Å–Ω–æ–≥—Ä–∞–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ö—Ä–∞—Å–Ω–æ–≥—Ä–∞–¥",
    "–ö—É–ø'—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ö—É–ø'—è–Ω—Å—å–∫",
    "–ß—É–≥—É—ó–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ß—É–≥—É—ó–≤",
    "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥–∫–∞",
    "–£–º–∞–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–£–º–∞–Ω—å",
    "–ë–æ–≥–æ–¥—É—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ë–æ–≥–æ–¥—É—Ö—ñ–≤",
    "–ö–∞–º'—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ö–∞–º'—è–Ω—Å—å–∫–µ",
    "–û—Ö—Ç–∏—Ä—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–û—Ö—Ç–∏—Ä–∫–∞",
    "–ì–∞–π—Å–∏–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ì–∞–π—Å–∏–Ω",
    "–ú–∏—Ä–≥–æ—Ä–æ–¥—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ú–∏—Ä–≥–æ—Ä–æ–¥",
    "–ù—ñ–∂–∏–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ù—ñ–∂–∏–Ω",
    "–ö–æ—Ä—é–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–ö–æ—Ä—é–∫—ñ–≤–∫–∞",
    "–†–æ–º–µ–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–†–æ–º–Ω–∏",
    "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–π—Å—å–∫–∏–π —Ä–∞–π–æ–Ω": "–û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ—è",
    
    # –ú—ñ—Å—Ç–∞ –∑ –ø–æ–≤–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
    "–º. –•–∞—Ä–∫—ñ–≤ —Ç–∞ –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞": "–•–∞—Ä–∫—ñ–≤",
    "–º. –ú–∞—Ä–≥–∞–Ω–µ—Ü—å —Ç–∞ –ú–∞—Ä–≥–∞–Ω–µ—Ü—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞": "–ú–∞—Ä–≥–∞–Ω–µ—Ü—å",
    
    # –ì—Ä–æ–º–∞–¥–∏
    "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∏–≥–æ—Ä—ñ–≤—Å—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞": "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∞–¥",
    "–õ–∏–ø–µ—Ü—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞": "–õ–∏–ø–µ—Ü—å", 
    "–í–æ–≤—á–∞–Ω—Å—å–∫–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞ –≥—Ä–æ–º–∞–¥–∞": "–í–æ–≤—á–∞–Ω—Å—å–∫",
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    "–ö–æ—Ä—é–∫—ñ–≤—Å—å–∫–∏–π": "–ö–æ—Ä—é–∫—ñ–≤–∫–∞",
    "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∏–π": "–ü–æ–ª—Ç–∞–≤–∞", 
    "–õ–æ–∑—ñ–≤—Å—å–∫–∏–π": "–õ–æ–∑–æ–≤–∞",
    "–ö—É–ø'—è–Ω—Å—å–∫–∏–π": "–∫—É–ø'—è–Ω—Å—å–∫",  # –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –≤ –±–∞–∑–µ
    "–ö–∞–º'—è–Ω—Å—å–∫–∏–π": "–∫–∞–º'—è–Ω—Å—å–∫–µ",  # –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –≤ –±–∞–∑–µ
    "–û—Ö—Ç–∏—Ä—Å—å–∫–∏–π": "–û—Ö—Ç–∏—Ä–∫–∞",
    "–°—É–º—Å—å–∫–∏–π": "–°—É–º–∏",
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–æ–º–∞–¥—ã (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ —Å–æ—Å–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)
    "–ß–µ—Ä–≤–æ–Ω–æ–≥—Ä–∏–≥–æ—Ä—ñ–≤—Å—å–∫–∞": "—Ä–æ–º–Ω–∏",  # –±–ª–∏–∑–∫–æ –∫ –†–æ–º–Ω–∞–º
    "–õ–∏–ø–µ—Ü—å–∫–∞": "—Å—É–º–∏",  # –±–ª–∏–∑–∫–æ –∫ –°—É–º–∞–º
}

def smart_region_lookup(region_name, city_coords, name_region_map):
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–∞"""
    
    # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
    if region_name in REGION_NAME_MAPPING:
        mapped_name = REGION_NAME_MAPPING[region_name]
        # –ü–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for city_name in city_coords:
            if city_name.lower() == mapped_name.lower():
                return city_coords[city_name]
    
    # 2. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    for city_name in city_coords:
        if city_name.lower() == region_name.lower():
            return city_coords[city_name]
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    key_words = extract_key_words(region_name)
    for key_word in key_words:
        for city_name in city_coords:
            if city_name.lower() == key_word.lower():
                return city_coords[city_name]
    
    # 4. –ü–æ–∏—Å–∫ –≤ NAME_REGION_MAP
    for city, region in name_region_map.items():
        if any(word.lower() in city.lower() or word.lower() in region.lower() 
               for word in key_words):
            if city in city_coords:
                return city_coords[city]
    
    # 5. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
    region_lower = region_name.lower()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ—Ä–Ω—è —Å–ª–æ–≤–∞
    for key_word in key_words:
        key_lower = key_word.lower()
        for city_name in city_coords:
            city_lower = city_name.lower()
            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if (len(key_lower) > 3 and 
                (key_lower in city_lower or city_lower in key_lower)):
                return city_coords[city_name]
    
    return None

def extract_key_words(region_name):
    """–ò–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    stop_words = {
        '—Ä–∞–π–æ–Ω', '–æ–±–ª–∞—Å—Ç—å', '—Ç–µ—Ä–∏—Ç–æ—Ä—ñ–∞–ª—å–Ω–∞', '–≥—Ä–æ–º–∞–¥–∞', '–º.', '—Ç–∞', '—ñ', '—Ç–∞'
    }
    
    words = region_name.replace(',', ' ').split()
    key_words = []
    
    for word in words:
        clean_word = word.strip('.,()').lower()
        if clean_word not in stop_words and len(clean_word) > 2:
            key_words.append(word.strip('.,()'))
    
    return key_words

def test_region_mapping():
    """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
    alerts = ukraine_api.get_active_alerts()
    if not alerts:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    from app import CITY_COORDS, NAME_REGION_MAP
    
    found = 0
    total = 0
    
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {len(alerts)} —Ä–µ–≥–∏–æ–Ω–æ–≤:")
    
    for alert in alerts:
        region_name = alert.get("regionName", "")
        if not region_name:
            continue
            
        total += 1
        coords = smart_region_lookup(region_name, CITY_COORDS, NAME_REGION_MAP)
        
        if coords:
            found += 1
            print(f"‚úÖ {region_name} -> {coords}")
        else:
            print(f"‚ùå {region_name} -> –ù–ï –ù–ê–ô–î–ï–ù–û")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            key_words = extract_key_words(region_name)
            print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {key_words}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {found}/{total} ({found/total*100:.1f}%) —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
    
    return found, total

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    test_region_mapping()
