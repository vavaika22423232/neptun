#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ JavaScript —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è NEPTUN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import json
import os

def create_city_boundaries_js():
    """
    –°–æ–∑–¥–∞—Ç—å JavaScript —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–æ–≤
    """
    geojson_file = 'ukraine_major_cities_boundaries.geojson'
    
    if not os.path.exists(geojson_file):
        print(f"–§–∞–π–ª {geojson_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    with open(geojson_file, 'r', encoding='utf-8') as f:
        boundaries_data = json.load(f)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è {len(boundaries_data['features'])} –≥–æ—Ä–æ–¥–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º JavaScript —Ñ–∞–π–ª
    js_content = f'''/**
 * –ì—Ä–∞–Ω–∏—Ü—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è NEPTUN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ OpenStreetMap —á–µ—Ä–µ–∑ Overpass API
 * –°–æ–∑–¥–∞–Ω–æ: {boundaries_data.get("metadata", {}).get("created", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")}
 */

// –î–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–æ–≤
window.CITY_BOUNDARIES = {json.dumps(boundaries_data, ensure_ascii=False, indent=2)};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 * @param {{string}} cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {{Object|null}} GeoJSON Feature —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –≥–æ—Ä–æ–¥–∞
 */
window.getCityBoundary = function(cityName) {{
    if (!window.CITY_BOUNDARIES || !window.CITY_BOUNDARIES.features) {{
        console.warn('–î–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return null;
    }}
    
    const normalizedName = cityName.toUpperCase().trim();
    
    return window.CITY_BOUNDARIES.features.find(feature => 
        feature.properties.name && 
        feature.properties.name.toUpperCase() === normalizedName
    ) || null;
}};

/**
 * –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 * @param {{string}} cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @param {{Object}} options - –û–ø—Ü–∏–∏ —Å—Ç–∏–ª—è –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞
 * @returns {{Object|null}} Leaflet layer –∏–ª–∏ null
 */
window.addCityBoundaryToMap = function(map, cityName, options = {{}}) {{
    const boundary = window.getCityBoundary(cityName);
    
    if (!boundary || !boundary.geometry) {{
        console.warn(`–ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${{cityName}}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return null;
    }}
    
    const defaultOptions = {{
        color: '#3b82f6',
        weight: 2,
        opacity: 0.8,
        fillColor: '#3b82f6',
        fillOpacity: 0.15,
        className: 'city-boundary',
        interactive: true
    }};
    
    const layerOptions = {{...defaultOptions, ...options}};
    
    try {{
        const layer = L.geoJSON(boundary, {{
            style: layerOptions,
            onEachFeature: function(feature, layer) {{
                const props = feature.properties;
                let popupContent = `<div style="min-width: 200px;">
                    <h3 style="margin: 0 0 8px 0; color: #1e40af;">
                        üèôÔ∏è ${{props.name}}
                    </h3>`;
                
                if (props.population) {{
                    const pop = parseInt(props.population).toLocaleString('uk-UA');
                    popupContent += `<p style="margin: 4px 0;"><strong>–ù–∞—Å–µ–ª–µ–Ω–Ω—è:</strong> ${{pop}}</p>`;
                }}
                
                if (props.admin_level) {{
                    popupContent += `<p style="margin: 4px 0;"><strong>–ê–¥–º—ñ–Ω. —Ä—ñ–≤–µ–Ω—å:</strong> ${{props.admin_level}}</p>`;
                }}
                
                if (props.osm_id) {{
                    popupContent += `<p style="margin: 4px 0; font-size: 0.8em; color: #666;">
                        <strong>OSM ID:</strong> ${{props.osm_id}}
                    </p>`;
                }}
                
                popupContent += `</div>`;
                
                layer.bindPopup(popupContent);
            }}
        }});
        
        layer.addTo(map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–ª–æ–µ–≤ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (window.cityBoundaryLayers) {{
            window.cityBoundaryLayers[cityName] = layer;
        }} else {{
            window.cityBoundaryLayers = {{}};
            window.cityBoundaryLayers[cityName] = layer;
        }}
        
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞: ${{cityName}}`);
        return layer;
        
    }} catch (error) {{
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è ${{cityName}}:`, error);
        return null;
    }}
}};

/**
 * –£–¥–∞–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ —Å –∫–∞—Ä—Ç—ã
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 * @param {{string}} cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
window.removeCityBoundaryFromMap = function(map, cityName) {{
    if (window.cityBoundaryLayers && window.cityBoundaryLayers[cityName]) {{
        map.removeLayer(window.cityBoundaryLayers[cityName]);
        delete window.cityBoundaryLayers[cityName];
        console.log(`–£–¥–∞–ª–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞: ${{cityName}}`);
    }}
}};

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 * @param {{Object}} options - –û–ø—Ü–∏–∏ —Å—Ç–∏–ª—è
 */
window.showAllCityBoundaries = function(map, options = {{}}) {{
    if (!window.CITY_BOUNDARIES || !window.CITY_BOUNDARIES.features) {{
        console.warn('–î–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return null;
    }}
    
    const defaultOptions = {{
        color: '#6b7280',
        weight: 1,
        opacity: 0.6,
        fillColor: '#6b7280',
        fillOpacity: 0.08,
        className: 'all-city-boundaries'
    }};
    
    const layerOptions = {{...defaultOptions, ...options}};
    
    try {{
        const layer = L.geoJSON(window.CITY_BOUNDARIES, {{
            style: layerOptions,
            onEachFeature: function(feature, layer) {{
                const props = feature.properties;
                const popupContent = `<b>${{props.name}}</b><br>
                    ${{props.population ? '–ù–∞—Å–µ–ª–µ–Ω–Ω—è: ' + parseInt(props.population).toLocaleString('uk-UA') : ''}}`;
                layer.bindPopup(popupContent);
            }}
        }});
        
        layer.addTo(map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
        if (!window.cityBoundaryLayers) {{
            window.cityBoundaryLayers = {{}};
        }}
        window.cityBoundaryLayers['_all_boundaries'] = layer;
        
        console.log('–ü–æ–∫–∞–∑–∞–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤');
        return layer;
        
    }} catch (error) {{
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö –≥—Ä–∞–Ω–∏—Ü:', error);
        return null;
    }}
}};

/**
 * –°–∫—Ä—ã—Ç—å –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–æ–≤
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 */
window.hideAllCityBoundaries = function(map) {{
    if (window.cityBoundaryLayers) {{
        Object.keys(window.cityBoundaryLayers).forEach(cityName => {{
            map.removeLayer(window.cityBoundaryLayers[cityName]);
        }});
        window.cityBoundaryLayers = {{}};
        console.log('–°–∫—Ä—ã—Ç—ã –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–æ–≤');
    }}
}};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
 * @returns {{Array}} –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
 */
window.getAvailableCities = function() {{
    if (!window.CITY_BOUNDARIES || !window.CITY_BOUNDARIES.features) {{
        return [];
    }}
    
    return window.CITY_BOUNDARIES.features.map(feature => feature.properties.name);
}};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
 * @param {{string}} cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {{boolean}} true –µ—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã
 */
window.hasCityBoundary = function(cityName) {{
    return window.getCityBoundary(cityName) !== null;
}};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
console.log('‚úì –ú–æ–¥—É–ª—å –≥—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('–î–æ—Å—Ç—É–ø–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤:', window.getAvailableCities());
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JavaScript —Ñ–∞–π–ª
    with open('static/city_boundaries.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print("‚úì JavaScript —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: static/city_boundaries.js")
    
    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤ –∫–æ—Ä–Ω–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    with open('city_boundaries.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print("‚úì –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: city_boundaries.js")
    
    return len(boundaries_data['features'])

def create_cities_list():
    """
    –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    """
    geojson_file = 'ukraine_major_cities_boundaries.geojson'
    
    if not os.path.exists(geojson_file):
        print(f"–§–∞–π–ª {geojson_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(geojson_file, 'r', encoding='utf-8') as f:
        boundaries_data = json.load(f)
    
    cities = []
    for feature in boundaries_data['features']:
        props = feature['properties']
        city_info = {
            'name': props['name'],
            'population': props.get('population'),
            'osm_id': props.get('osm_id'),
            'admin_level': props.get('admin_level'),
            'bounds': props.get('bounds')
        }
        cities.append(city_info)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
    cities.sort(key=lambda x: int(x['population'] or 0), reverse=True)
    
    with open('cities_with_boundaries.json', 'w', encoding='utf-8') as f:
        json.dump(cities, f, ensure_ascii=False, indent=2)
    
    print(f"‚úì –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω: cities_with_boundaries.json ({len(cities)} –≥–æ—Ä–æ–¥–æ–≤)")

def main():
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('static'):
        os.makedirs('static')
        print("‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ static/")
    
    cities_count = create_city_boundaries_js()
    create_cities_list()
    
    print(f"\\n=== –ì–æ—Ç–æ–≤–æ! ===")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {cities_count}")
    print("\\n–§–∞–π–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("1. static/city_boundaries.js - –¥–ª—è production")
    print("2. city_boundaries.js - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("3. cities_with_boundaries.json - —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤")
    
    print("\\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ index.html:")
    print("1. –î–æ–±–∞–≤—å—Ç–µ <script src='static/city_boundaries.js'></script>")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   - addCityBoundaryToMap(map, '–ö–∏—ó–≤')")
    print("   - showAllCityBoundaries(map)")
    print("   - getCityBoundary('–õ—å–≤—ñ–≤')")

if __name__ == "__main__":
    main()
