#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ —á–µ—Ä–µ–∑ API Render
"""

import requests
import json

def test_render_directional_threats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
    
    # URL API –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
    base_url = "https://neptun-latest.onrender.com"
    
    test_cases = [
        {
            "text": "–≤–æ—Ä–æ–∂—ñ –±–ø–ª–∞ –Ω–∞ —Ö–∞—Ä–∫—ñ–≤—â–∏–Ω–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É —á—É–≥—É—î–≤–∞ –∑—ñ —Å—Ö–æ–¥—É",
            "description": "–•–∞—Ä—å–∫–æ–≤—â–∏–Ω–∞ ‚Üí –ß—É–≥—É–µ–≤ —Å –≤–æ—Å—Ç–æ–∫–∞"
        },
        {
            "text": "–≥—Ä—É–ø–∞ –≤–æ—Ä–æ–∂–∏—Ö –±–ø–ª–∞ –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –≤—ñ–¥ –º.–∑–∞–ø–æ—Ä—ñ–∂–∂—è, –∫—É—Ä—Å - –ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π",
            "description": "–ë–ü–õ–ê —é–≥–æ-–∑–∞–ø–∞–¥–Ω–µ–µ –ó–∞–ø–æ—Ä–æ–∂—å—è, –∫—É—Ä—Å —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
        }
    ]
    
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ Render\n")
    
    for i, case in enumerate(test_cases, 1):
        print(f"üìù –¢–µ—Å—Ç {i}: {case['description']}")
        print(f"üìÑ –¢–µ–∫—Å—Ç: {case['text']}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            url = f"{base_url}/debug_parse"
            
            # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ debug_parse API
            payload = {
                "text": case['text'],
                "channel": "test",
                "date": "2025-01-23 10:00:00"
            }
            
            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {url}...")
            
            response = requests.post(
                url, 
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
                
                # –ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                tracks = result.get('tracks', [])
                directional_found = False
                
                for track in tracks:
                    if 'directional_threat' in track and track['directional_threat']:
                        directional_found = True
                        print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞:")
                        print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {track.get('place', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")
                        print(f"   - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {track.get('direction', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")
                        print(f"   - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [{track.get('lat', 'N/A')}, {track.get('lng', 'N/A')}]")
                        if 'base_coords' in track:
                            base = track['base_coords']
                            print(f"   - –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [{base[0]}, {base[1]}]")
                        break
                
                if not directional_found:
                    print("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                    if tracks:
                        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
                        for track in tracks[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                            print(f"   - {track.get('place', 'no place')}: {track.get('threat_type', 'no type')}")
                    else:
                        print("   –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                
        except requests.exceptions.Timeout:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫—É–Ω–¥)")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print("-" * 70)
        print()

if __name__ == "__main__":
    test_render_directional_threats()
