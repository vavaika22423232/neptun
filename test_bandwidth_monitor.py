#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from bandwidth_monitor import track_bandwidth, check_rate_limit, get_bandwidth_stats

class MockRequest:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Flask request"""
    def __init__(self, remote_addr='127.0.0.1', path='/test'):
        self.remote_addr = remote_addr
        self.path = path
        self.headers = {}

class MockResponse:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Flask response"""
    def __init__(self, content_length=1024):
        self.content_length = content_length
        self.data = b'x' * content_length

def test_bandwidth_monitoring():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")
    print("-" * 50)
    
    # –¢–µ—Å—Ç 1: –¢—Ä–µ–∫–∏–Ω–≥ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print("1Ô∏è‚É£ –¢–µ—Å—Ç —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    request_mock = MockRequest('192.168.1.100', '/data')
    response_mock = MockResponse(2048)  # 2KB –æ—Ç–≤–µ—Ç
    
    track_bandwidth(response_mock, request_mock)
    
    stats = get_bandwidth_stats()
    print(f"   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–π—Ç: {stats['total_bytes_sent']}")
    print(f"   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö IP: {stats['active_ips']}")
    
    if stats['total_bytes_sent'] > 0:
        print("   ‚úÖ –¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå –¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 2: Rate limiting
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç rate limiting...")
    test_ip = '192.168.1.200'
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(10):
        mock_req = MockRequest(test_ip, f'/test{i}')
        mock_resp = MockResponse(512)
        track_bandwidth(mock_resp, mock_req)
    
    allowed, count = check_rate_limit(test_ip, max_requests_per_hour=5)
    print(f"   üìà –ó–∞–ø—Ä–æ—Å–æ–≤ —Å IP {test_ip}: {count}")
    print(f"   üõ°Ô∏è  –†–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø: {'–î–∞' if allowed else '–ù–µ—Ç'}")
    
    if count == 10:
        print("   ‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå Rate limiting –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    final_stats = get_bandwidth_stats()
    print(f"   üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {final_stats['total_mb_sent']:.2f}MB")
    print(f"   üë• –í—Å–µ–≥–æ IP: {final_stats['active_ips']}")
    
    if final_stats['top_consumers']:
        top = final_stats['top_consumers'][0]
        print(f"   üî• –¢–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {top['ip']} ({top['mb']:.2f}MB)")
        print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üí° –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

if __name__ == "__main__":
    test_bandwidth_monitoring()
