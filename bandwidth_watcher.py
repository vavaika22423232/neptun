#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –≤—ã–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
"""

import requests
import time
import json
from datetime import datetime

class BandwidthMonitor:
    def __init__(self, base_url='http://localhost:5000', admin_token='admin123'):
        self.base_url = base_url
        self.admin_token = admin_token
        self.monthly_limit_gb = 10  # –¶–µ–ª—å: —Å–Ω–∏–∑–∏—Ç—å –¥–æ 10GB –≤ –º–µ—Å—è—Ü
        self.daily_limit_gb = 0.5   # ~15GB –≤ –º–µ—Å—è—Ü –º–∞–∫—Å–∏–º—É–º
        
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞"""
        try:
            url = f"{self.base_url}/admin/bandwidth_stats?token={self.admin_token}"
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def format_bytes(self, bytes_value):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if bytes_value < 1024:
            return f"{bytes_value}B"
        elif bytes_value < 1024**2:
            return f"{bytes_value/1024:.1f}KB"
        elif bytes_value < 1024**3:
            return f"{bytes_value/1024**2:.1f}MB"
        else:
            return f"{bytes_value/1024**3:.2f}GB"
    
    def check_limits(self, stats):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∏ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        if not stats:
            return
            
        total_mb = stats.get('total_mb_sent', 0)
        total_gb = total_mb / 1024
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–§–ò–ö–ê [{datetime.now().strftime('%H:%M:%S')}]")
        print(f"   –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.format_bytes(stats.get('total_bytes_sent', 0))}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö IP: {stats.get('active_ips', 0)}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –ª–∏–º–∏—Ç–∞–º
        if total_gb > self.daily_limit_gb:
            print(f"üö® –ü–†–ï–í–´–®–ï–ù –î–ù–ï–í–ù–û–ô –õ–ò–ú–ò–¢! {total_gb:.2f}GB > {self.daily_limit_gb}GB")
        elif total_gb > self.daily_limit_gb * 0.8:
            print(f"‚ö†Ô∏è  –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É: {total_gb:.2f}GB / {self.daily_limit_gb}GB")
        else:
            print(f"‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞: {total_gb:.2f}GB / {self.daily_limit_gb}GB")
        
        # –¢–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        top_consumers = stats.get('top_consumers', [])
        if top_consumers:
            print(f"\nüî• –¢–û–ü –ü–û–¢–†–ï–ë–ò–¢–ï–õ–ò –¢–†–ê–§–ò–ö–ê:")
            for i, consumer in enumerate(top_consumers[:5], 1):
                ip = consumer['ip']
                mb = consumer['mb']
                print(f"   {i}. {ip}: {mb:.1f}MB")
                
                if mb > 50:  # –ë–æ–ª—å—à–µ 50MB —Å –æ–¥–Ω–æ–≥–æ IP
                    print(f"      ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!")
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞...")
        print(f"üìà –¶–µ–ª—å: –º–∞–∫—Å–∏–º—É–º {self.monthly_limit_gb}GB –≤ –º–µ—Å—è—Ü")
        print(f"üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {self.daily_limit_gb}GB")
        print("-" * 50)
        
        while True:
            try:
                stats = self.get_stats()
                self.check_limits(stats)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except KeyboardInterrupt:
                print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)

def main():
    monitor = BandwidthMonitor()
    
    # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if len(sys.argv) > 1 and sys.argv[1] == '--check':
        stats = monitor.get_stats()
        monitor.check_limits(stats)
    else:
        # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor.monitor_loop()

if __name__ == "__main__":
    import sys
    main()
