#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ù—ñ–∫–æ–ø–æ–ª—å (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç obstril.png –¥–ª—è –æ–±—Å—Ç—Ä–µ–ª–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ sys.path —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å app.py
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from app import classify
    
    def test_nikopol_obstril():
        print("=== –¢–µ—Å—Ç –ù—ñ–∫–æ–ø–æ–ª—å (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π) –¥–ª—è obstril.png ===\n")
        
        test_cases = [
            {
                'message': 'üí• –ù—ñ–∫–æ–ø–æ–ª—å (–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –æ–±—Å—Ç—Ä—ñ–ª—É! –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!',
                'city_context': '–Ω—ñ–∫–æ–ø–æ–ª—å',
                'expected_category': 'obstril',
                'expected_icon': 'obstril.png',
                'description': '–ù—ñ–∫–æ–ø–æ–ª—å (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π) + –æ–±—Å—Ç—Ä–µ–ª'
            },
            {
                'message': 'üí• –ù–∏–∫–æ–ø–æ–ª—å (–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –æ–±—Å—Ç—Ä—ñ–ª—É! –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!',
                'city_context': '–Ω–∏–∫–æ–ø–æ–ª—å',
                'expected_category': 'obstril',
                'expected_icon': 'obstril.png', 
                'description': '–ù–∏–∫–æ–ø–æ–ª—å (—Ä—É—Å—Å–∫–∏–π) + –æ–±—Å—Ç—Ä–µ–ª'
            },
            {
                'message': 'üõ∏ –ù—ñ–∫–æ–ø–æ–ª—å (–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –ë–ø–õ–ê!',
                'city_context': '–Ω—ñ–∫–æ–ø–æ–ª—å',
                'expected_category': 'fpv',
                'expected_icon': 'fpv.png',
                'description': '–ù—ñ–∫–æ–ø–æ–ª—å (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π) + –ë–ø–õ–ê (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å FPV)'
            },
            {
                'message': 'üí• –ú–∞—Ä–≥–∞–Ω–µ—Ü—å (–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.) –ó–∞–≥—Ä–æ–∑–∞ –æ–±—Å—Ç—Ä—ñ–ª—É!',
                'city_context': '–º–∞—Ä–≥–∞–Ω–µ—Ü—å',
                'expected_category': 'obstril', 
                'expected_icon': 'obstril.png',
                'description': '–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –ú–∞—Ä–≥–∞–Ω–µ—Ü—å + –æ–±—Å—Ç—Ä–µ–ª'
            }
        ]
        
        for test in test_cases:
            print(f"–¢–µ—Å—Ç: {test['description']}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {test['message']}")
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–æ—Ä–æ–¥–∞: '{test['city_context']}'")
            
            try:
                category, icon = classify(test['message'], test['city_context'])
                
                print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: category='{category}', icon='{icon}'")
                print(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è: category='{test['expected_category']}', icon='{test['expected_icon']}'")
                
                if category == test['expected_category'] and icon == test['expected_icon']:
                    print(f"  ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û")
                else:
                    print(f"  ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û")
                    
            except Exception as e:
                print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
            
            print()

    if __name__ == "__main__":
        test_nikopol_obstril()

except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ app.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
