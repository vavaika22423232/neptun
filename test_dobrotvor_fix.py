#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –î–æ–±—Ä–æ—Ç–≤–æ—Ä–æ–º - –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import process_message, logging
import datetime

# –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
TEST_MESSAGE = """–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è! | üõ∏ –õ—å–≤—ñ–≤ (–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.)
–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è! | 4—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –î–æ–±—Ä–æ—Ç–≤—ñ—Ä (–º—É–ª—å—Ç–∏—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–µ) | üõ∏ –ë—É—Å—å–∫ (–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.)
–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —É–∫—Ä–∏—Ç—Ç—è!"""

print("=== –¢–ï–°–¢ –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===")
print("–°–æ–æ–±—â–µ–Ω–∏–µ:")
print(TEST_MESSAGE)
print("\n" + "="*50)

try:
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("=== –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ö–û–ô ===")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è:")
    lines = TEST_MESSAGE.split('\n')
    for i, line in enumerate(lines, 1):
        print(f"  –°—Ç—Ä–æ–∫–∞ {i}: '{line}'")
        if 'üõ∏' in line:
            print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç üõ∏")
        if '–±–ø–ª–∞' in line.lower():
            print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –ë–ü–õ–ê")
        if 'üõ∏' in line and '–±–ø–ª–∞' in line.lower():
            print(f"    ‚úÖ UAV line!")
    
    result = process_message(TEST_MESSAGE, "test_id", datetime.datetime.now().isoformat(), "test_channel")
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò ===")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    print(f"–¢–∏–ø: {type(result)}")
    
    if result and isinstance(result, list):
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫: {len(result)}")
        
        if len(result) >= 2:
            print("üéâ –ü–†–û–ë–õ–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –†–ï–®–ï–ù–ê! –°–æ–∑–¥–∞–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –º–µ—Ç–∫–∏")
        else:
            print("‚ö†Ô∏è –í—Å–µ –µ—â–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –º–µ—Ç–∫–∞")
        
        print("\n–í—Å–µ –º–µ—Ç–∫–∏:")
        for i, track in enumerate(result, 1):
            place = track.get('place', 'Unknown')
            lat = track.get('lat', 'N/A')
            lng = track.get('lng', 'N/A')
            source = track.get('source_match', 'Unknown source')
            threat_type = track.get('threat_type', 'Unknown')
            print(f"  {i}. {place} ({lat}, {lng})")
            print(f"     –ò—Å—Ç–æ—á–Ω–∏–∫: {source}, –¢–∏–ø: {threat_type}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        places = [track.get('place', '') for track in result]
        expected_places = ['–õ—å–≤—ñ–≤', '–î–æ–±—Ä–æ—Ç–≤—ñ—Ä', '–ë—É—Å—å–∫']
        
        print(f"\n=== –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–ï–ú–´–• –ì–û–†–û–î–û–í ===")
        for place in expected_places:
            if place in places:
                print(f"‚úÖ {place} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {place} –ù–ï –Ω–∞–π–¥–µ–Ω")
                
        found_count = sum(1 for place in expected_places if place in places)
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {found_count} –∏–∑ {len(expected_places)} –æ–∂–∏–¥–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
        
except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "="*50)
print("=== –ê–ù–ê–õ–ò–ó ===")
print("–î–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫–∞ –õ—å–≤–æ–≤–∞")
print("–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –º–µ—Ç–∫–∏ –õ—å–≤–æ–≤–∞, –ë—É—Å—å–∫–∞ –ò –î–æ–±—Ä–æ—Ç–≤–æ—Ä–∞")
print("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3 –º–µ—Ç–∫–∏ –≤–º–µ—Å—Ç–æ 1")
