#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
sys.path.append('/Users/vladimirmalik/Desktop/render2')

from app import CITY_COORDS

# –ì–æ—Ä–æ–¥–∞ –∏–∑ UAV —Å–æ–æ–±—â–µ–Ω–∏—è
uav_cities = [
    # –ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞
    ("—Ä—É–∂–∏–Ω", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–±–µ—Ä–¥–∏—á—ñ–≤", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"), 
    ("—á–æ–ø–æ–≤–∏—á—ñ", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–≥–æ–ª–æ–≤–∏–Ω–µ", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–º–∞–ª–∏–Ω", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    ("–æ–ª–µ–≤—Å—å–∫", "–ñ–∏—Ç–æ–º–∏—Ä—â–∏–Ω–∞"),
    
    # –†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞
    ("—Ä—ñ–≤–Ω–µ", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    ("–±–µ—Ä–µ–∑–Ω–µ", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    ("–∫–æ—Å—Ç–æ–ø—ñ–ª—å", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),
    ("–∑–∞—Ä—ñ—á–Ω–µ", "–†—ñ–≤–Ω–µ–Ω—â–∏–Ω–∞"),  # –î–û–ë–ê–í–õ–ï–ù
    
    # –í–æ–ª–∏–Ω—å
    ("—Å–µ–Ω–∫–µ–≤–∏—á—ñ–≤–∫–∞", "–í–æ–ª–∏–Ω—å"),  # –î–û–ë–ê–í–õ–ï–ù
    ("–ª—É—Ü—å–∫", "–í–æ–ª–∏–Ω—å"),
    ("–≤–æ–ª–æ–¥–∏–º–∏—Ä", "–í–æ–ª–∏–Ω—å"),
    ("–≥–æ–ª–æ–±–∏", "–í–æ–ª–∏–Ω—å"),        # –î–û–ë–ê–í–õ–ï–ù
    ("–∫–∞–º—ñ–Ω—å-–∫–∞—à–∏—Ä—Å—å–∫–∏–π", "–í–æ–ª–∏–Ω—å")
]

print("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ UAV –ì–û–†–û–î–û–í ===")
print(f"–í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {len(uav_cities)}")
print()

all_found = True
newly_added = []

for city, region in uav_cities:
    normalized_city = city.lower().strip()
    if normalized_city in CITY_COORDS:
        coords = CITY_COORDS[normalized_city]
        status = "‚úÖ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ–¥–∞–≤–Ω–æ
        if city in ["–∑–∞—Ä—ñ—á–Ω–µ", "—Å–µ–Ω–∫–µ–≤–∏—á—ñ–≤–∫–∞", "–≥–æ–ª–æ–±–∏"]:
            newly_added.append((city, coords))
            status = "üÜï"
        
        print(f"{status} {city:20} ({region:15}): {coords}")
    else:
        print(f"‚ùå {city:20} ({region:15}): –ù–ï –ù–ê–ô–î–ï–ù")
        all_found = False

print()
print("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
if all_found:
    print("üéâ –í–°–ï –ì–û–†–û–î–ê –ù–ê–ô–î–ï–ù–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {len(newly_added)}")
    
    if newly_added:
        print()
        print("–ù–ï–î–ê–í–ù–û –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ì–û–†–û–î–ê:")
        for city, coords in newly_added:
            print(f"  üÜï {city}: {coords}")
        
        print()
        print("–≠—Ç–∏ –≥–æ—Ä–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ UAV —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
        print("–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö fallback.")
        
else:
    print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ì–û–†–û–î–ê –í–°–ï –ï–©–ï –û–¢–°–£–¢–°–¢–í–£–Æ–¢")

print()
print("=== –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –ü–û –†–ï–ì–ò–û–ù–ê–ú ===")
regions = {}
for city, region in uav_cities:
    if region not in regions:
        regions[region] = {'total': 0, 'found': 0}
    regions[region]['total'] += 1
    if city.lower() in CITY_COORDS:
        regions[region]['found'] += 1

for region, stats in regions.items():
    percentage = (stats['found'] / stats['total']) * 100
    print(f"{region:15}: {stats['found']}/{stats['total']} ({percentage:.1f}%)")
