#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import process_message

def test_comprehensive_filtering():
    print("=== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò ===")
    
    test_cases = [
        # –î–æ–ª–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è (–ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ)
        {
            "message": "ü™ø–ü–µ—Ä–µ–¥–∏—Å–ª–æ–∫–∞—Ü—ñ—è –¢—É-160 –∑ –£–∫—Ä–∞—ó–Ω–∫–∏ –Ω–∞ \"–ï–Ω–≥–µ–ª—å—Å-2\"",
            "should_filter": True,
            "reason": "–ü–µ—Ä–µ–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –¢—É-160"
        },
        {
            "message": "–ø—Ä–æ—Ç—è–≥–æ–º –Ω–æ—á—ñ —É–≤–∞–∂–Ω–∏–º –±—É—Ç–∏ –∫–∏—î–≤—É, –∫–∏—ó–≤—â–∏–Ω–∞ —ñ –∑–∞—Ö—ñ–¥–Ω–∞ —É–∫—Ä–∞—ó–Ω–∞. —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–ø–æ—à–Ω–∏–∫",
            "should_filter": True,
            "reason": "–û–±—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
        },
        {
            "message": "üü¢ –ö–æ–Ω–æ—Ç–æ–ø—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–°—É–º—Å—å–∫–∞ –æ–±–ª.)\n–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏. –ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ!",
            "should_filter": True,
            "reason": "–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏"
        },
        {
            "message": "üö® –®–æ—Å—Ç–∫–∏–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω (–°—É–º—Å—å–∫–∞ –æ–±–ª.)\n–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞. –ü—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!",
            "should_filter": True,
            "reason": "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞"
        },
        
        # –ù–ï –¥–æ–ª–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è (–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ)
        {
            "message": "–ë–ø–õ–ê –Ω–∞ –°—É–º–∏, –∫—É—Ä—Å –Ω–∞ –ü–æ–ª—Ç–∞–≤—É",
            "should_filter": False,
            "reason": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —É–≥—Ä–æ–∑–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"
        },
        {
            "message": "–û–±—Å—Ç—Ä—ñ–ª –•–∞—Ä–∫–æ–≤–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤–∏–±—É—Ö–∏",
            "should_filter": False,
            "reason": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—Å—Ç—Ä–µ–ª"
        }
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        message = test_case["message"]
        should_filter = test_case["should_filter"]
        reason = test_case["reason"]
        
        print(f"\n–¢–ï–°–¢ {i}: {reason}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:60]}...")
        
        try:
            result = process_message(message, f"test_{i}", "2025-09-27 12:00:00", "test")
            
            is_filtered = (result is None or result == [])
            
            if is_filtered == should_filter:
                status = "‚úÖ –ü–†–û–®–ï–õ" 
                passed += 1
            else:
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
            expected = "–¥–æ–ª–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è" if should_filter else "–ù–ï –¥–æ–ª–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è"
            actual = "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ" if is_filtered else f"—Å–æ–∑–¥–∞–Ω–æ {len(result) if result else 0} –º–µ—Ç–æ–∫"
            
            print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {actual}")
            print(f"{status}")
                    
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        
        print("-" * 60)
    
    print(f"\n=== –ò–¢–û–ì–ò ===")
    print(f"–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")

if __name__ == "__main__":
    test_comprehensive_filtering()
