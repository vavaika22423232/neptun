#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ –≤ Python –±—ç–∫–µ–Ω–¥–µ
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
from app import spacy_enhanced_geocoding

def test_directional_threats():
    """–¢–µ—Å—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑"""
    
    test_cases = [
        {
            "text": "–≤–æ—Ä–æ–∂—ñ –±–ø–ª–∞ –Ω–∞ —Ö–∞—Ä–∫—ñ–≤—â–∏–Ω–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É —á—É–≥—É—î–≤–∞ –∑—ñ —Å—Ö–æ–¥—É",
            "description": "–ü—Ä–∏–º–µ—Ä 1: –•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ß—É–≥—É–µ–≤ —Å –≤–æ—Å—Ç–æ–∫–∞"
        },
        {
            "text": "–Ω–∞ —á–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞ - –≤ –Ω–∞–ø—Ä—è–º–∫—É –Ω.–ø.–ø–æ–Ω–æ—Ä–Ω–∏—Ü—è –∑ –ø—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ —Å—Ö–æ–¥—É",
            "description": "–ü—Ä–∏–º–µ—Ä 2: –ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ü–æ–Ω–æ—Ä–Ω–∏—Ü—É —Å —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫–∞"
        },
        {
            "text": "–≥—Ä—É–ø–∞ –≤–æ—Ä–æ–∂–∏—Ö –±–ø–ª–∞ –Ω–∞ –ø—ñ–≤–¥–µ–Ω–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ –≤—ñ–¥ –º.–∑–∞–ø–æ—Ä—ñ–∂–∂—è, –∫—É—Ä—Å - –ø—ñ–≤–Ω—ñ—á–Ω–æ-–∑–∞—Ö—ñ–¥–Ω–∏–π",
            "description": "–ü—Ä–∏–º–µ—Ä 3: –ë–ü–õ–ê —é–≥–æ-–∑–∞–ø–∞–¥–Ω–µ–µ –ó–∞–ø–æ—Ä–æ–∂—å—è, –∫—É—Ä—Å —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
        },
        {
            "text": "—Ä–∞–∫–µ—Ç–∏ –Ω–∞ —Å—Ö–æ–¥—ñ –≤—ñ–¥ –∫–∏—î–≤–∞",
            "description": "–ü—Ä–∏–º–µ—Ä 4: –†–∞–∫–µ—Ç—ã –≤–æ—Å—Ç–æ—á–Ω–µ–µ –ö–∏–µ–≤–∞"
        },
        {
            "text": "—à–∞—Ö–µ–¥–∏ –Ω–∞ –ø—ñ–≤–Ω–æ—á—ñ –≤—ñ–¥ –æ–¥–µ—Å–∏, –Ω–∞–ø—Ä—è–º–æ–∫ –ø—ñ–≤–¥–µ–Ω–Ω–∏–π",
            "description": "–ü—Ä–∏–º–µ—Ä 5: –®–∞—Ö–µ–¥—ã —Å–µ–≤–µ—Ä–Ω–µ–µ –û–¥–µ—Å—Å—ã, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∂–Ω–æ–µ"
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ –≤ Python –±—ç–∫–µ–Ω–¥–µ\n")
    
    for i, case in enumerate(test_cases, 1):
        print(f"üìù –¢–µ—Å—Ç {i}: {case['description']}")
        print(f"üìÑ –¢–µ–∫—Å—Ç: {case['text']}")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            result = spacy_enhanced_geocoding(case['text'])
            
            print(f"üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            directional_found = False
            if result:
                for point in result:
                    if 'directional_threat' in point and point['directional_threat']:
                        directional_found = True
                        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞:")
                        print(f"   - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {point.get('direction', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")
                        print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {point.get('name', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")
                        print(f"   - –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {point.get('base_coords', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã')}")
                        print(f"   - –°–º–µ—â–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {point.get('coords', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã')}")
                        break
                
                if not directional_found:
                    print("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 80)
        print()

if __name__ == "__main__":
    test_directional_threats()
