"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –∑ –î–¢–ï–ö —Ç–∞ –£–∫—Ä–µ–Ω–µ—Ä–≥–æ.
–ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.
"""

import logging
import requests
from datetime import datetime
from typing import Dict, List, Any
from dtek_scraper import DTEKScraper

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ScheduleUpdater:
    """–ö–ª–∞—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å"""
    
    def __init__(self):
        self.dtek_scraper = DTEKScraper()
        self.schedules_cache = {}
        self.last_update = None
        
        # –î–¢–ï–ö —Ä–µ–≥—ñ–æ–Ω–∏
        self.dtek_regions = {
            'kyiv': 'https://www.dtek-krem.com.ua',
            'odesa': 'https://www.dtek-oem.com.ua', 
            'dnipro': 'https://www.dtek-dnem.com.ua',
            'donetsk': 'https://www.dtek-donec.com.ua'
        }
        
        # –£–∫—Ä–µ–Ω–µ—Ä–≥–æ API
        self.ukrenergo_api = 'https://www.ukrenergo.energy/api'
    
    def update_all_schedules(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª"""
        logger.info(f"üîÑ Starting schedule update at {datetime.now()}")
        
        try:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –î–¢–ï–ö
            dtek_schedules = self._update_dtek_schedules()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –£–∫—Ä–µ–Ω–µ—Ä–≥–æ
            ukrenergo_schedules = self._update_ukrenergo_schedules()
            
            # –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.schedules_cache = {
                'dtek': dtek_schedules,
                'ukrenergo': ukrenergo_schedules,
                'last_update': datetime.now().isoformat()
            }
            
            self.last_update = datetime.now()
            logger.info(f"‚úÖ Schedule update completed successfully")
            logger.info(f"   DTEK regions: {len(dtek_schedules)}")
            logger.info(f"   Ukrenergo data: {'available' if ukrenergo_schedules else 'not available'}")
            
            return self.schedules_cache
            
        except Exception as e:
            logger.error(f"‚ùå Error updating schedules: {e}")
            return None
    
    def _update_dtek_schedules(self) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∑ –î–¢–ï–ö —Å–∞–π—Ç—ñ–≤"""
        dtek_data = {}
        
        for region, base_url in self.dtek_regions.items():
            try:
                logger.info(f"  Fetching DTEK {region}...")
                
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —á–µ—Ä–≥
                region_schedules = {}
                for subgroup in ['1.1', '1.2', '2.1', '2.2', '3.1', '3.2']:
                    schedule = self.dtek_scraper.get_schedule_for_queue(subgroup, region)
                    if schedule:
                        region_schedules[subgroup] = schedule
                
                if region_schedules:
                    dtek_data[region] = region_schedules
                    logger.info(f"    ‚úì {region}: {len(region_schedules)} subgroups")
                else:
                    logger.warning(f"    ‚ö† {region}: No schedules found")
                    
            except Exception as e:
                logger.error(f"    ‚úó {region}: {e}")
                continue
        
        return dtek_data
    
    def _update_ukrenergo_schedules(self) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –£–∫—Ä–µ–Ω–µ—Ä–≥–æ API"""
        try:
            logger.info("  Fetching Ukrenergo data...")
            
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ä—ñ–∑–Ω–∏—Ö endpoints –£–∫—Ä–µ–Ω–µ—Ä–≥–æ
            endpoints = [
                '/outages',
                '/schedule',
                '/power-system-status'
            ]
            
            for endpoint in endpoints:
                try:
                    url = f"{self.ukrenergo_api}{endpoint}"
                    response = requests.get(url, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"    ‚úì Ukrenergo {endpoint}: success")
                        return data
                        
                except Exception as e:
                    logger.debug(f"    - Ukrenergo {endpoint}: {e}")
                    continue
            
            logger.warning("    ‚ö† Ukrenergo: No data available from any endpoint")
            return {}
            
        except Exception as e:
            logger.error(f"    ‚úó Ukrenergo error: {e}")
            return {}
    
    def get_schedule_for_address(self, city: str, street: str, building: str, region: str = None) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∞–¥—Ä–µ—Å–∏
        
        Args:
            city: –ú—ñ—Å—Ç–æ/—Å–µ–ª–æ
            street: –í—É–ª–∏—Ü—è
            building: –ë—É–¥–∏–Ω–æ–∫
            region: –†–µ–≥—ñ–æ–Ω (kyiv, odesa, dnipro, donetsk)
        
        Returns:
            –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–ª—è –∞–¥—Ä–µ—Å–∏
        """
        try:
            # –Ø–∫—â–æ —Ä–µ–≥—ñ–æ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ –º—ñ—Å—Ç—É
            if not region:
                region = self._detect_region(city)
            
            # –ü–æ—à—É–∫ –∞–¥—Ä–µ—Å–∏ –≤ –î–¢–ï–ö
            result = self.dtek_scraper.search_address_dtek(city, street, building, region)
            
            if result and 'queue' in result:
                queue = result['queue']
                
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ –∫–µ—à—É
                if region in self.schedules_cache.get('dtek', {}):
                    if queue in self.schedules_cache['dtek'][region]:
                        schedule = self.schedules_cache['dtek'][region][queue]
                        return {
                            'queue': queue,
                            'schedule': schedule,
                            'region': region,
                            'provider': result.get('provider', '–î–¢–ï–ö'),
                            'last_update': self.last_update.isoformat() if self.last_update else None
                        }
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ, –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ø—Ä—è–º—É
            schedule = self.dtek_scraper.get_schedule_for_queue(result.get('queue', '1.1'), region)
            
            return {
                'queue': result.get('queue', 'unknown'),
                'schedule': schedule,
                'region': region,
                'provider': result.get('provider', 'unknown'),
                'last_update': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error getting schedule for address: {e}")
            return {}
    
    def _detect_region(self, city: str) -> str:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—É –ø–æ –Ω–∞–∑–≤—ñ –º—ñ—Å—Ç–∞"""
        city_lower = city.lower()
        
        # –ö–∏—ó–≤ —Ç–∞ –æ–±–ª–∞—Å—Ç—å
        if any(name in city_lower for name in ['–∫–∏—ó–≤', 'kyiv', '–±—É—á–∞', '—ñ—Ä–ø—ñ–Ω—å', '–±–æ—Ä–∏—Å–ø—ñ–ª—å', '–±—Ä–æ–≤–∞—Ä–∏']):
            return 'kyiv'
        
        # –û–¥–µ—Å–∞ —Ç–∞ –æ–±–ª–∞—Å—Ç—å
        if any(name in city_lower for name in ['–æ–¥–µ—Å', 'odesa', '—á–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫', '—é–∂–Ω–µ', '–ª–∏–º–∞–Ω–∫–∞']):
            return 'odesa'
        
        # –î–Ω—ñ–ø—Ä–æ —Ç–∞ –æ–±–ª–∞—Å—Ç—å
        if any(name in city_lower for name in ['–¥–Ω—ñ–ø—Ä–æ', 'dnipro', '–∫—Ä–∏–≤–∏–π —Ä—ñ–≥', '–Ω—ñ–∫–æ–ø–æ–ª—å', '–∫–∞–º\'—è–Ω—Å—å–∫–µ']):
            return 'dnipro'
        
        # –î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å
        if any(name in city_lower for name in ['–º–∞—Ä—ñ—É–ø–æ–ª—å', '–∫—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫', '—Å–ª–æ–≤\'—è–Ω—Å—å–∫', '–ø–æ–∫—Ä–æ–≤—Å—å–∫']):
            return 'donetsk'
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ö–∏—ó–≤
        return 'kyiv'
    
    def get_cached_schedules(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
        return self.schedules_cache
    
    def is_cache_valid(self, max_age_hours: int = 1) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫–µ—à"""
        if not self.last_update:
            return False
        
        age = (datetime.now() - self.last_update).total_seconds() / 3600
        return age < max_age_hours


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
schedule_updater = ScheduleUpdater()


def start_schedule_updates():
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä—à–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    logger.info("üöÄ Starting initial schedule update...")
    schedule_updater.update_all_schedules()
