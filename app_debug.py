#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ—Ä—Å–∏—è app.py —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω—Å–æ–ª–∏
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler('app_debug.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Telegram
    telegram_logger = logging.getLogger('telethon')
    telegram_logger.setLevel(logging.INFO)
    
    return logging.getLogger('app_debug')

logger = setup_logging()

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç app.py...")
        import app
        logger.info("‚úÖ app.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if hasattr(app, 'API_ID') and app.API_ID:
            logger.info(f"‚úÖ TELEGRAM_API_ID: {app.API_ID}")
        else:
            logger.error("‚ùå TELEGRAM_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        if hasattr(app, 'API_HASH') and app.API_HASH:
            logger.info(f"‚úÖ TELEGRAM_API_HASH: {app.API_HASH[:10]}...")
        else:
            logger.error("‚ùå TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        if hasattr(app, 'client') and app.client:
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏—è
            try:
                logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info("‚ö†Ô∏è  –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–∏–∑–±–µ–≥–∞–µ–º –∑–∞–≤–∏—Å–∞–Ω–∏—è)")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                return False
        else:
            logger.error("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def test_messages_collection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("üì® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_file = 'messages.json'
        if os.path.exists(messages_file):
            size = os.path.getsize(messages_file)
            mod_time = datetime.fromtimestamp(os.path.getmtime(messages_file))
            logger.info(f"‚úÖ messages.json –Ω–∞–π–¥–µ–Ω: {size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω {mod_time}")
            
            # –ß—Ç–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑
            import json
            with open(messages_file, 'r', encoding='utf-8') as f:
                try:
                    messages = json.load(f)
                    logger.info(f"‚úÖ –í messages.json –Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    if messages:
                        latest = messages[-1]
                        logger.info(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {latest.get('date', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                        logger.info(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latest.get('lat', '–Ω–µ—Ç')}, {latest.get('lng', '–Ω–µ—Ç')}")
                        logger.info(f"‚ö†Ô∏è  –¢–∏–ø —É–≥—Ä–æ–∑—ã: {latest.get('threat_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        return len(messages) > 0
                    else:
                        logger.warning("‚ö†Ô∏è  messages.json –ø—É—Å—Ç–æ–π")
                        return False
                        
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ messages.json: {e}")
                    return False
        else:
            logger.error("‚ùå messages.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

def test_flask_app():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        import app
        
        if hasattr(app, 'app'):
            logger.info("‚úÖ Flask app –Ω–∞–π–¥–µ–Ω")
            
            # –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
            with app.app.test_client() as client:
                # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                response = client.get('/')
                logger.info(f"üìÑ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {response.status_code}")
                
                # –¢–µ—Å—Ç API
                response = client.get('/api/messages')
                logger.info(f"üì° API messages: {response.status_code}")
                if response.status_code == 200:
                    data = response.get_json()
                    logger.info(f"üìä API –≤–µ—Ä–Ω—É–ª {len(data)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                return True
        else:
            logger.error("‚ùå Flask app –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flask: {e}")
        return False

def run_diagnostics():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    logger.info("=" * 50)
    
    results = {
        'telegram': test_telegram_connection(),
        'messages': test_messages_collection(), 
        'flask': test_flask_app()
    }
    
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    logger.info("=" * 50)
    
    for test, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test.upper()}: {status}")
    
    all_passed = all(results.values())
    
    if all_passed:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å")
    else:
        logger.warning("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - —Å–º. –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ")
    
    return all_passed

def run_with_monitoring():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if not run_diagnostics():
            logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å...")
        
        # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
        import app
        
        logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
        logger.info("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ app_debug.log")
        logger.info("üîó –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://0.0.0.0:5000")
        
        # –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        app.app.run(host='0.0.0.0', port=5000, debug=False)
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == 'diagnose':
        # –¢–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        run_diagnostics()
    elif len(sys.argv) > 1 and sys.argv[1] == 'flask-only':
        # –¢–æ–ª—å–∫–æ Flask –±–µ–∑ Telegram –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info("üåê –†–ï–ñ–ò–ú –¢–û–õ–¨–ö–û FLASK - –ë–ï–ó TELEGRAM –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        logger.info("==================================================")
        try:
            logger.info("üì¶ –ò–º–ø–æ—Ä—Ç app.py...")
            import app
            logger.info("‚úÖ app.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ") 
            logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000...")
            app.app.run(host='0.0.0.0', port=5000, debug=False)
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")
            import traceback
            logger.error(traceback.format_exc())
    else:
        # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        run_with_monitoring()
