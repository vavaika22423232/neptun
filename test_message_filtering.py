#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
"""

import sys
sys.path.append('.')

try:
    from app import process_message
except ImportError as e:
    print(f"Import error: {e}")
    sys.exit(1)

def test_message_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    test_cases = [
        {
            'name': '–ü–µ—Ä–µ–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –¢—É-160 (–¥–æ–ª–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è)',
            'message': 'ü™ø–ü–µ—Ä–µ–¥–∏—Å–ª–æ–∫–∞—Ü—ñ—è –¢—É-160 –∑ –£–∫—Ä–∞—ó–Ω–∫–∏ –Ω–∞ "–ï–Ω–≥–µ–ª—å—Å-2" ‚úô[ –ù–∞–ø—Ä—è–º–æ–∫ —Ä–∞–∫–µ—Ç ](https://t.me/napramok)‚úô ‚úô[–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–Ω–∞–ª](https://send.monobank.ua/5Pwr3r52mg)‚úô **–í—ñ–¥–º—ñ—á–µ–Ω–æ –¢—É-160 –≤ –°–∞—Ä–∞—Ç–æ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ, –π–º–æ–≤—ñ—Ä–Ω–æ –ø–µ—Ä–µ–ª—ñ—Ç –Ω–∞ –∞–µ—Ä–æ–¥—Ä–æ–º –ï–Ω–≥–µ–ª—å—Å-2 –∑ –∞–µ—Ä–æ–¥—Ä–æ–º–∞ –£–∫—Ä–∞—ó–Ω–∫–∞.**',
            'should_filter': True
        },
        {
            'name': '–û–±—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–æ—á–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è)',
            'message': '–ø—Ä–æ—Ç—è–≥–æ–º –Ω–æ—á—ñ —É–≤–∞–∂–Ω–∏–º –±—É—Ç–∏ –∫–∏—î–≤—É, –∫–∏—ó–≤—â–∏–Ω–∞ —ñ –∑–∞—Ö—ñ–¥–Ω–∞ —É–∫—Ä–∞—ó–Ω–∞. —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–ø–æ—à–Ω–∏–∫',
            'should_filter': True
        },
        {
            'name': '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —É–≥—Ä–æ–∑–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–ù–ï –¥–æ–ª–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è)',
            'message': '–ë–ø–õ–ê –Ω–∞ –°—É–º–∏, –∫—É—Ä—Å –Ω–∞ –ü–æ–ª—Ç–∞–≤—É',
            'should_filter': False
        },
        {
            'name': '–û–±—Å—Ç—Ä–µ–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–ù–ï –¥–æ–ª–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è)', 
            'message': '–û–±—Å—Ç—Ä—ñ–ª –•–∞—Ä–∫–æ–≤–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤–∏–±—É—Ö–∏',
            'should_filter': False
        }
    ]
    
    print("=== –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô ===\n")
    
    for i, case in enumerate(test_cases):
        print(f"–¢–ï–°–¢ {i+1}: {case['name']}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {case['message'][:100]}{'...' if len(case['message']) > 100 else ''}")
        
        try:
            result = process_message(case['message'], f"filter_test_{i}", "2025-09-27 12:00:00", "test")
            
            if result is None:
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û (None)")
                filtered = True
            elif isinstance(result, list) and len(result) == 0:
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)")
                filtered = True
            else:
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ï –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û ({len(result)} –º–µ—Ç–æ–∫)")
                filtered = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if case['should_filter'] and filtered:
                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
            elif not case['should_filter'] and not filtered:
                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ, —Å–æ–∑–¥–∞–Ω—ã –º–µ—Ç–∫–∏")
            elif case['should_filter'] and not filtered:
                print("‚ùå –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ, –Ω–æ —Å–æ–∑–¥–∞–ª–∏—Å—å –º–µ—Ç–∫–∏")
            else:
                print("‚ùå –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–æ –±—ã–ª–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            
        print("-" * 60)
        print()

if __name__ == "__main__":
    test_message_filtering()
