#!/usr/bin/env python3

"""
Test threat cancellation message detection
"""

def test_cancellation_patterns():
    """Test various cancellation message patterns"""
    
    test_messages = [
        "üü¢ –û—á–∞–∫—ñ–≤ (–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.)\n–í—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ!",
        "–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ —É –ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
        "–í—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –æ–±—Å—Ç—Ä—ñ–ª—É —É –•–∞—Ä–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ", 
        "üî¥ –û—á–∞–∫—ñ–≤ (–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.)\n–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ù–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!",
        "üü¢ –ö–∏—ó–≤\n–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏",
    ]
    
    print("üîç Testing threat cancellation detection...")
    print("-" * 70)
    
    for i, message in enumerate(test_messages, 1):
        print(f"Test {i}: {message[:50]}...")
        
        # Check for cancellation patterns
        message_lower = message.lower()
        
        is_cancellation = False
        cancellation_reasons = []
        
        # Check various cancellation patterns
        if '–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è' in message_lower:
            is_cancellation = True
            cancellation_reasons.append("–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è")
        
        if '–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –æ–±—Å—Ç—Ä' in message_lower:
            is_cancellation = True
            cancellation_reasons.append("–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –æ–±—Å—Ç—Ä")
            
        if '–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –±–ø–ª–∞' in message_lower:
            is_cancellation = True
            cancellation_reasons.append("–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –±–ø–ª–∞")
        
        if '–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏' in message_lower or '–≤—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏' in message_lower:
            is_cancellation = True  
            cancellation_reasons.append("–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏")
        
        # General pattern: –≤—ñ–¥–±—ñ–π + (–∑–∞–≥—Ä–æ–∑–∏ | —Ç—Ä–∏–≤–æ–≥–∏)
        if ('–≤—ñ–¥–±—ñ–π' in message_lower and 
            any(cancel_word in message_lower for cancel_word in ['–∑–∞–≥—Ä–æ–∑–∏', '—Ç—Ä–∏–≤–æ–≥–∏'])):
            if not is_cancellation:  # Don't double-count
                is_cancellation = True
                cancellation_reasons.append("–≤—ñ–¥–±—ñ–π + (–∑–∞–≥—Ä–æ–∑–∏|—Ç—Ä–∏–≤–æ–≥–∏)")
        
        if 'üü¢' in message:
            cancellation_reasons.append("green circle emoji")
        
        if is_cancellation:
            print(f"   ‚úÖ CANCELLATION detected: {', '.join(cancellation_reasons)}")
            print(f"   ‚Üí Should be list_only=True, no map marker")
        else:
            print(f"   ‚ùå NOT cancellation - should create marker")
        
        print()

def test_message_processing():
    """Test the specific message processing logic"""
    
    test_message = "üü¢ –û—á–∞–∫—ñ–≤ (–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.)\n–í—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ!"
    
    print("üîç Testing specific message processing...")
    print("-" * 70)
    print(f"Message: {test_message}")
    print()
    
    # Extract components
    import re
    
    # Test the priority emoji pattern
    head = test_message.split('\n', 1)[0][:160]
    print(f"Head: {head}")
    
    general_emoji_pattern = r'^[^\w\s]*\s*([–ê-–Ø–Ü–á–Ñ–Å–∞-—è—ñ—ó—î—ë\'\-\s]+)\s*\(([^)]*–æ–±–ª[^)]*)\)'
    general_emoji_match = re.search(general_emoji_pattern, head, re.IGNORECASE)
    
    if general_emoji_match:
        city = general_emoji_match.group(1).strip()
        oblast = general_emoji_match.group(2).strip()
        print(f"‚úÖ Emoji pattern matched: city='{city}', oblast='{oblast}'")
    else:
        print("‚ùå Emoji pattern did not match")
    
    # Check UAV words
    uav_words = ['–±–ø–ª–∞', '–¥—Ä–æ–Ω', '—à–∞—Ö–µ–¥', '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–∑–∞–≥—Ä–æ–∑–∞', '—Ç—Ä–∏–≤–æ–≥–∞']
    found_uav_words = [word for word in uav_words if word in test_message.lower()]
    if found_uav_words:
        print(f"‚úÖ UAV words found: {found_uav_words}")
    else:
        print("‚ùå No UAV words found")
    
    # Check cancellation logic
    text_lower = test_message.lower()
    is_cancellation = ('–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏' in text_lower or 
                      '–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏' in text_lower or
                      ('–≤—ñ–¥–±—ñ–π' in text_lower and 
                       any(cancel_word in text_lower for cancel_word in ['–∑–∞–≥—Ä–æ–∑–∏', '—Ç—Ä–∏–≤–æ–≥–∏'])))
    
    if is_cancellation:
        print("‚úÖ Cancellation logic triggered")
        print("   Expected result: list_only=True, threat_type='alarm_cancel', no map marker")
    else:
        print("‚ùå Cancellation logic not triggered - would create marker!")
    
    print()

def test_both_types():
    """Test both threat and cancellation messages side by side"""
    
    print("üîç Comparing threat vs cancellation messages...")
    print("-" * 70)
    
    threat_message = "üî¥ –û—á–∞–∫—ñ–≤ (–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.)\n–ó–∞–≥—Ä–æ–∑–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ù–µ–≥–∞–π–Ω–æ –ø—Ä—è–º—É–π—Ç–µ –≤ —É–∫—Ä–∏—Ç—Ç—è!"
    cancel_message = "üü¢ –û—á–∞–∫—ñ–≤ (–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.)\n–í—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ë–ü–õ–ê. –ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ!"
    
    for msg_type, message in [("THREAT", threat_message), ("CANCEL", cancel_message)]:
        print(f"{msg_type}: {message[:50]}...")
        
        text_lower = message.lower()
        is_cancellation = ('–≤—ñ–¥–±—ñ–π –∑–∞–≥—Ä–æ–∑–∏' in text_lower or 
                          '–≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏' in text_lower or
                          ('–≤—ñ–¥–±—ñ–π' in text_lower and 
                           any(cancel_word in text_lower for cancel_word in ['–∑–∞–≥—Ä–æ–∑–∏', '—Ç—Ä–∏–≤–æ–≥–∏'])))
        
        if is_cancellation:
            print(f"   ‚Üí list_only=True, threat_type='alarm_cancel', NO map marker")
        else:
            print(f"   ‚Üí regular marker with coordinates, threat classification")
        print()

if __name__ == "__main__":
    test_cancellation_patterns()
    test_message_processing()
    test_both_types()
