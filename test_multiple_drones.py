#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import process_message

def test_multiple_drones_display():
    """Test that multiple drones create multiple separate markers."""
    
    text = """7—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –°–º—ñ–ª—É
3—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ü–æ–ª—Ç–∞–≤—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –•–∞—Ä–∫—ñ–≤"""

    print("=== –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥—Ä–æ–Ω–æ–≤ ===")
    print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{text}\n")
    
    result = process_message(text, "test_multiple_drones", "2025-09-19 23:10:00", "test_channel")
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(result)}")
    
    if isinstance(result, list):
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫: {len(result)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
        cities = {}
        for item in result:
            place = item.get('place', '')
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–±–µ–∑ #1, #2 –∏ —Ç.–¥.)
            base_city = place.split(' #')[0] if ' #' in place else place
            
            if base_city not in cities:
                cities[base_city] = []
            cities[base_city].append(item)
        
        print("\n=== –ú–µ—Ç–∫–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º ===")
        for city, items in cities.items():
            print(f"\n{city}: {len(items)} –º–µ—Ç–æ–∫")
            for i, item in enumerate(items, 1):
                place_name = item.get('place', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                lat = item.get('lat', '–Ω–µ—Ç')
                lng = item.get('lng', '–Ω–µ—Ç')
                count = item.get('count', 1)
                print(f"  {i}. {place_name}: ({lat}, {lng}) count={count}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        expected = {
            '–°–º—ñ–ª–∞': 7,    # 7—Ö –ë–ø–õ–ê
            '–ü–æ–ª—Ç–∞–≤–∞': 3,  # 3—Ö –ë–ø–õ–ê  
            '–•–∞—Ä–∫—ñ–≤': 1    # –ë–ø–õ–ê (–±–µ–∑ —á–∏—Å–ª–∞)
        }
        
        print(f"\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===")
        total_expected = sum(expected.values())
        print(f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–µ—Ç–æ–∫: {total_expected}")
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –º–µ—Ç–æ–∫: {len(result)}")
        
        all_correct = True
        for city, expected_count in expected.items():
            actual_count = len(cities.get(city, []))
            status = "‚úÖ" if actual_count == expected_count else "‚ùå"
            print(f"{status} {city}: {actual_count}/{expected_count} –º–µ—Ç–æ–∫")
            if actual_count != expected_count:
                all_correct = False
        
        if all_correct and len(result) == total_expected:
            print(f"\nüéâ –£–°–ü–ï–•! –í—Å–µ –º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ—Ç–æ–∫")
            
    else:
        print("–û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

if __name__ == "__main__":
    test_multiple_drones_display()
