#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import process_message

def test_extended_multi_regional_message():
    """Test the extended multi-regional UAV message with 6 regions."""
    
    text = """–°—É–º—â–∏–Ω–∞:
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–æ—Ä–æ–º–ª—é
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –¢—Ä–æ—Å—Ç—è–Ω–µ—Ü—å
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö–∏—Ä–∏–∫—ñ–≤–∫—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –û—Ö—Ç–∏—Ä–∫—É 
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –õ–∏–ø–æ–≤—É –î–æ–ª–∏–Ω—É 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–∫—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –õ–µ–±–µ–¥–∏–Ω 
3—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ß—É–ø–∞—Ö—ñ–≤–∫—É

–ü–æ–ª—Ç–∞–≤—â–∏–Ω–∞:
3—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö–æ—Ç–µ–ª—å–≤—É 
3—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–∏—Ä–≥–æ—Ä–æ–¥ 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–∞—à—ñ–≤–∫—É
5—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ü–æ–ª—Ç–∞–≤—É 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –†–µ—à–µ—Ç–∏–ª—ñ–≤–∫—É 
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –•–æ—Ä–æ–ª
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö—Ä–µ–º–µ–Ω—á—É–∫ 
3—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ö–æ–±–µ–ª—è–∫–∏ 
11—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –õ—É–±–Ω–∏
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ü–∏—Ä—è—Ç–∏–Ω 

–ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞:
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –°—Ä—ñ–±–Ω–µ 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –Ü—á–Ω—é

–•–∞—Ä–∫—ñ–≤—â–∏–Ω–∞:
3—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –®–µ–≤—á–µ–Ω–∫–æ–≤–µ
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ó–ª–∞—Ç–æ–ø—ñ–ª—å
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ë–µ—Ä–µ—Å—Ç–∏–Ω

–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞:
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ú–∞–≥–¥–∞–ª–∏–Ω—ñ–≤–∫—É 
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –õ–∏—Ö—ñ–≤–∫—É

–ß–µ—Ä–∫–∞—â–∏–Ω–∞:
2—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –ß–µ—Ä–∫–∞—Å–∏ 
7—Ö –ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –°–º—ñ–ª—É
–ë–ø–õ–ê –∫—É—Ä—Å–æ–º –Ω–∞ –î—Ä–∞–±—ñ–≤"""

    print("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (6 —Ä–µ–≥–∏–æ–Ω–æ–≤) ===")
    print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{text}\n")
    
    result = process_message(text, "test_msg_extended", "2025-09-19 23:05:00", "test_channel")
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {type(result)}")
    
    if isinstance(result, list):
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫: {len(result)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        expected_counts = {
            '–°—É–º—â–∏–Ω–∞': 8,      # –ë–æ—Ä–æ–º–ª—è, –¢—Ä–æ—Å—Ç—è–Ω–µ—Ü—å, –ö–∏—Ä–∏–∫—ñ–≤–∫–∞, –û—Ö—Ç–∏—Ä–∫–∞, –õ–∏–ø–æ–≤–∞ –î–æ–ª–∏–Ω–∞, –ú–∏–∫–æ–ª–∞—ó–≤–∫–∞, –õ–µ–±–µ–¥–∏–Ω, –ß—É–ø–∞—Ö—ñ–≤–∫–∞
            '–ü–æ–ª—Ç–∞–≤—â–∏–Ω–∞': 10,  # –ö–æ—Ç–µ–ª—å–≤–∞, –ú–∏—Ä–≥–æ—Ä–æ–¥, –ú–∞—à—ñ–≤–∫–∞, –ü–æ–ª—Ç–∞–≤–∞, –†–µ—à–µ—Ç–∏–ª—ñ–≤–∫–∞, –•–æ—Ä–æ–ª, –ö—Ä–µ–º–µ–Ω—á—É–∫, –ö–æ–±–µ–ª—è–∫–∏, –õ—É–±–Ω–∏, –ü–∏—Ä—è—Ç–∏–Ω
            '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞': 2, # –°—Ä—ñ–±–Ω–µ, –Ü—á–Ω—è
            '–•–∞—Ä–∫—ñ–≤—â–∏–Ω–∞': 3,   # –®–µ–≤—á–µ–Ω–∫–æ–≤–µ, –ó–ª–∞—Ç–æ–ø—ñ–ª—å, –ë–µ—Ä–µ—Å—Ç–∏–Ω
            '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞': 2, # –ú–∞–≥–¥–∞–ª–∏–Ω—ñ–≤–∫–∞, –õ–∏—Ö—ñ–≤–∫–∞
            '–ß–µ—Ä–∫–∞—â–∏–Ω–∞': 3     # –ß–µ—Ä–∫–∞—Å–∏, –°–º—ñ–ª–∞, –î—Ä–∞–±—ñ–≤
        }
        
        total_expected = sum(expected_counts.values())
        print(f"–û–∂–∏–¥–∞–ª–æ—Å—å –≥–æ—Ä–æ–¥–æ–≤: {total_expected}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        regions = {}
        not_found = []
        
        for item in result:
            if 'text' in item and 'lat' in item and 'lng' in item:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞
                first_line = item['text'].split('\n')[0] if '\n' in item['text'] else item['text']
                
                region = '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'
                if '—Å—É–º—â–∏–Ω' in first_line.lower():
                    region = '–°—É–º—â–∏–Ω–∞'
                elif '–ø–æ–ª—Ç–∞–≤—â–∏–Ω' in first_line.lower():
                    region = '–ü–æ–ª—Ç–∞–≤—â–∏–Ω–∞'  
                elif '—á–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω' in first_line.lower():
                    region = '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞'
                elif '—Ö–∞—Ä–∫—ñ–≤—â–∏–Ω' in first_line.lower():
                    region = '–•–∞—Ä–∫—ñ–≤—â–∏–Ω–∞'
                elif '–¥–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω' in first_line.lower():
                    region = '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞'
                elif '—á–µ—Ä–∫–∞—â–∏–Ω' in first_line.lower():
                    region = '–ß–µ—Ä–∫–∞—â–∏–Ω–∞'
                
                if region not in regions:
                    regions[region] = []
                regions[region].append(item)
            else:
                not_found.append(item)
        
        print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º ===")
        for region_name, expected_count in expected_counts.items():
            actual_count = len(regions.get(region_name, []))
            status = "‚úÖ" if actual_count == expected_count else "‚ùå"
            print(f"{status} {region_name}: {actual_count}/{expected_count} –≥–æ—Ä–æ–¥–æ–≤")
            
            if region_name in regions:
                for i, item in enumerate(regions[region_name], 1):
                    city = item.get('text', '').split(' –Ω–∞ ')[-1].split('\n')[0] if ' –Ω–∞ ' in item.get('text', '') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    lat = item.get('lat', '–Ω–µ—Ç')
                    lng = item.get('lng', '–Ω–µ—Ç')
                    print(f"  {i}. {city}: ({lat}, {lng})")
        
        # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        if '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ' in regions:
            print(f"\n‚ö†Ô∏è  –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {len(regions['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'])} –≥–æ—Ä–æ–¥–æ–≤")
            for i, item in enumerate(regions['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'], 1):
                city = item.get('text', '').split(' –Ω–∞ ')[-1].split('\n')[0] if ' –Ω–∞ ' in item.get('text', '') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                lat = item.get('lat', '–Ω–µ—Ç')
                lng = item.get('lng', '–Ω–µ—Ç')
                print(f"  {i}. {city}: ({lat}, {lng})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coords_seen = set()
        duplicates = []
        for item in result:
            coord_key = f"{item.get('lat')},{item.get('lng')}"
            if coord_key in coords_seen:
                duplicates.append(coord_key)
            coords_seen.add(coord_key)
        
        if duplicates:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(duplicates)}")
            for dup in set(duplicates):
                print(f"  - {dup}")
        else:
            print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (len(result) / total_expected) * 100 if total_expected > 0 else 0
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result)}/{total_expected} –≥–æ—Ä–æ–¥–æ–≤ ({success_rate:.1f}%)")
        print(f"   –†–µ–≥–∏–æ–Ω–æ–≤: {len([r for r in regions.keys() if r != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'])}/6")
            
    else:
        print("–û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

if __name__ == "__main__":
    test_extended_multi_regional_message()
