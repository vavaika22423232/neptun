#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from app import process_message

def test_multiple_regions():
    print("=== Testing Multiple Regions Message ===")
    
    message = """–ú–∏–∫–æ–ª–∞—ó–≤—â–∏–Ω–∞:
10 —à–∞—Ö–µ–¥—ñ–≤ –±—ñ–ª—è –í–æ–∑–Ω–µ—Å–µ–Ω—Å—å–∫–∞ —Ç–∞ —Ä–∞–π–æ–Ω
3 —à–∞—Ö–µ–¥–∏ –±—ñ–ª—è –ú–∏–∫–æ–ª–∞—î–≤–∞
–ü–æ–ª—Ç–∞–≤—â–∏–Ω–∞:
8 —à–∞—Ö–µ–¥—ñ–≤ –±—ñ–ª—è –õ–µ–±–µ–¥–∏–Ω–∞/–û—Ö—Ç–∏—Ä–∫–∏ –Ω–∞ –ü–æ–ª—Ç–∞–≤—É
6 —à–∞—Ö–µ–¥—ñ–≤ —á–µ—Ä–µ–∑ –ö–∞–º º—è–Ω—Å—å–∫–µ/–ö—Ä–µ–º–µ–Ω—á—É–∫ —Ä–∞–π–æ–Ω –Ω–∞ –ü–æ–ª—Ç–∞–≤—É
1 —à–∞—Ö–µ–¥ –±—ñ–ª—è –ü–æ–ª—Ç–∞–≤–∏
1 —à–∞—Ö–µ–¥ –±—ñ–ª—è –ö—Ä–µ–º–µ–Ω—á—É–∫–∞
–ß–µ—Ä–Ω—ñ–≥—ñ–≤—â–∏–Ω–∞:
6 —à–∞—Ö–µ–¥—ñ–≤ –∑ –±–æ–∫—É –ö–æ–Ω–æ—Ç–æ–ø—É
–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—â–∏–Ω–∞:
1 —à–∞—Ö–µ–¥ –Ω–∞ –ù–æ–≤–æ—É–∫—Ä–∞—ó–Ω–∫—É
–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—â–∏–Ω–∞:
1 —à–∞—Ö–µ–¥ –±—ñ–ª—è –î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–æ–≥–æ —Ä–∞–π–æ–Ω—É
„Ö§
‚û°–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"""
    
    print(f"Message: {message}")
    print()
    
    markers = process_message(message, mid=12345, date_str='2025-09-17', channel='test')
    
    print(f"Found {len(markers)} markers:")
    for i, marker in enumerate(markers, 1):
        print(f"{i}. {marker['place']} at ({marker['lat']}, {marker['lng']}) - {marker['source_match']}")
        print(f"   Threat type: {marker['threat_type']}")
        print()
    
    print("=== Analysis ===")
    cities_found = [m['place'].lower() for m in markers]
    expected_mapping = {
        '–≤–æ–∑–Ω–µ—Å–µ–Ω—Å—å–∫': ['–≤–æ–∑–Ω–µ—Å–µ–Ω—Å—å–∫–∞'],
        '–º–∏–∫–æ–ª–∞—ó–≤': ['–º–∏–∫–æ–ª–∞—î–≤–∞', '–º–∏–∫–æ–ª–∞—ó–≤'], 
        '–ª–µ–±–µ–¥–∏–Ω': ['–ª–µ–±–µ–¥–∏–Ω', '–ª–µ–±–µ–¥–∏–Ω–∞'],
        '–æ—Ö—Ç–∏—Ä–∫–∞': ['–æ—Ö—Ç–∏—Ä–∫–∞', '–æ—Ö—Ç–∏—Ä–∫–∏'],
        '–ø–æ–ª—Ç–∞–≤–∞': ['–ø–æ–ª—Ç–∞–≤–∞', '–ø–æ–ª—Ç–∞–≤–∏'],
        '–∫—Ä–µ–º–µ–Ω—á—É–∫': ['–∫—Ä–µ–º–µ–Ω—á—É–∫', '–∫—Ä–µ–º–µ–Ω—á—É–∫–∞'],
        '–∫–æ–Ω–æ—Ç–æ–ø': ['–∫–æ–Ω–æ—Ç–æ–ø', '–∫–æ–Ω–æ—Ç–æ–ø—É'],
        '–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω–∫–∞': ['–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω–∫–∞', '–Ω–æ–≤–æ—É–∫—Ä–∞—ó–Ω–∫—É'],
        '–¥–Ω—ñ–ø—Ä–æ': ['–¥–Ω—ñ–ø—Ä–æ', '–¥–Ω—ñ–ø—Ä–∞']
    }
    
    found_count = 0
    for expected, variants in expected_mapping.items():
        found = any(any(variant in city or city in variant for variant in variants) for city in cities_found)
        if found:
            found_count += 1
            print(f"‚úÖ {expected.title()}")
        else:
            print(f"‚ùå {expected.title()}")
    
    success_rate = (found_count / len(expected_mapping)) * 100
    print(f"\nüìä Success Rate: {found_count}/{len(expected_mapping)} ({success_rate:.1f}%)")
    
    if success_rate >= 80:
        print("üéâ EXCELLENT: Geographic processing working well!")
    elif success_rate >= 60:
        print("‚úÖ GOOD: Most cities processed correctly")
    else:
        print("‚ö†Ô∏è NEEDS IMPROVEMENT: Many cities missed")

if __name__ == "__main__":
    test_multiple_regions()
