#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ JavaScript —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è NEPTUN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import json
import os

def create_regions_boundaries_js():
    """
    –°–æ–∑–¥–∞—Ç—å JavaScript —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ–±–ª–∞—Å—Ç–µ–π
    """
    geojson_file = 'ukraine_regions_boundaries.geojson'
    
    if not os.path.exists(geojson_file):
        print(f"–§–∞–π–ª {geojson_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö
    with open(geojson_file, 'r', encoding='utf-8') as f:
        boundaries_data = json.load(f)
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è {len(boundaries_data['features'])} –æ–±–ª–∞—Å—Ç–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º JavaScript —Ñ–∞–π–ª
    js_content = f'''/**
 * –ì—Ä–∞–Ω–∏—Ü—ã —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è NEPTUN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ OpenStreetMap —á–µ—Ä–µ–∑ Overpass API
 * –°–æ–∑–¥–∞–Ω–æ: {boundaries_data.get("metadata", {}).get("created", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")}
 */

// –î–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ–±–ª–∞—Å—Ç–µ–π
window.REGION_BOUNDARIES = {json.dumps(boundaries_data, ensure_ascii=False, indent=2)};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 * @param {{string}} regionName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
 * @returns {{Object|null}} GeoJSON Feature —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ–±–ª–∞—Å—Ç–∏
 */
window.getRegionBoundary = function(regionName) {{
    if (!window.REGION_BOUNDARIES || !window.REGION_BOUNDARIES.features) {{
        console.warn('–î–∞–Ω—ñ –ø—Ä–æ –≥—Ä–∞–Ω–∏—Ü—ñ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
        return null;
    }}
    
    const normalizedName = regionName.toUpperCase().trim();
    
    return window.REGION_BOUNDARIES.features.find(feature => 
        feature.properties.name && 
        feature.properties.name.toUpperCase().includes(normalizedName.replace(' –û–ë–õ–ê–°–¢–¨', ''))
    ) || null;
}};

/**
 * –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 * @param {{string}} regionName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
 * @param {{Object}} options - –û–ø—Ü–∏–∏ —Å—Ç–∏–ª—è –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞
 * @returns {{Object|null}} Leaflet layer –∏–ª–∏ null
 */
window.addRegionBoundaryToMap = function(map, regionName, options = {{}}) {{
    const boundary = window.getRegionBoundary(regionName);
    
    if (!boundary || !boundary.geometry) {{
        console.warn(`–ì—Ä–∞–Ω–∏—Ü—ñ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ "${{regionName}}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        return null;
    }}
    
    const defaultOptions = {{
        color: '#f59e0b',
        weight: 3,
        opacity: 0.9,
        fillColor: '#f59e0b',
        fillOpacity: 0.2,
        className: 'region-boundary',
        interactive: true
    }};
    
    const layerOptions = {{...defaultOptions, ...options}};
    
    try {{
        const layer = L.geoJSON(boundary, {{
            style: layerOptions,
            onEachFeature: function(feature, layer) {{
                const props = feature.properties;
                let popupContent = `<div style="min-width: 220px;">
                    <h3 style="margin: 0 0 8px 0; color: #d97706;">
                        üèõÔ∏è ${{props.name}}
                    </h3>`;
                
                if (props.population) {{
                    const pop = parseInt(props.population).toLocaleString('uk-UA');
                    popupContent += `<p style="margin: 4px 0;"><strong>–ù–∞—Å–µ–ª–µ–Ω–Ω—è:</strong> ${{pop}}</p>`;
                }}
                
                if (props.admin_level) {{
                    popupContent += `<p style="margin: 4px 0;"><strong>–ê–¥–º—ñ–Ω. —Ä—ñ–≤–µ–Ω—å:</strong> ${{props.admin_level}}</p>`;
                }}
                
                if (props.type === 'special_city') {{
                    popupContent += `<p style="margin: 4px 0;"><strong>–°—Ç–∞—Ç—É—Å:</strong> –ú—ñ—Å—Ç–æ –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º</p>`;
                }}
                
                if (props.osm_id) {{
                    popupContent += `<p style="margin: 4px 0; font-size: 0.8em; color: #666;">
                        <strong>OSM ID:</strong> ${{props.osm_id}}
                    </p>`;
                }}
                
                popupContent += `</div>`;
                
                layer.bindPopup(popupContent);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                layer.on('mouseover', function(e) {{
                    e.target.setStyle({{
                        weight: 4,
                        opacity: 1,
                        fillOpacity: 0.3
                    }});
                }});
                
                layer.on('mouseout', function(e) {{
                    e.target.setStyle(layerOptions);
                }});
            }}
        }});
        
        layer.addTo(map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–ª–æ–µ–≤ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (window.regionBoundaryLayers) {{
            window.regionBoundaryLayers[regionName] = layer;
        }} else {{
            window.regionBoundaryLayers = {{}};
            window.regionBoundaryLayers[regionName] = layer;
        }}
        
        console.log(`–î–æ–¥–∞–Ω–æ –≥—Ä–∞–Ω–∏—Ü—ñ –æ–±–ª–∞—Å—Ç—ñ: ${{regionName}}`);
        return layer;
        
    }} catch (error) {{
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥—Ä–∞–Ω–∏—Ü—å –¥–ª—è ${{regionName}}:`, error);
        return null;
    }}
}};

/**
 * –£–¥–∞–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ —Å –∫–∞—Ä—Ç—ã
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 * @param {{string}} regionName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
 */
window.removeRegionBoundaryFromMap = function(map, regionName) {{
    if (window.regionBoundaryLayers && window.regionBoundaryLayers[regionName]) {{
        map.removeLayer(window.regionBoundaryLayers[regionName]);
        delete window.regionBoundaryLayers[regionName];
        console.log(`–í–∏–¥–∞–ª–µ–Ω–æ –≥—Ä–∞–Ω–∏—Ü—ñ –æ–±–ª–∞—Å—Ç—ñ: ${{regionName}}`);
    }}
}};

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 * @param {{Object}} options - –û–ø—Ü–∏–∏ —Å—Ç–∏–ª—è
 */
window.showAllRegionBoundaries = function(map, options = {{}}) {{
    if (!window.REGION_BOUNDARIES || !window.REGION_BOUNDARIES.features) {{
        console.warn('–î–∞–Ω—ñ –ø—Ä–æ –≥—Ä–∞–Ω–∏—Ü—ñ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
        return null;
    }}
    
    const defaultOptions = {{
        color: '#f59e0b',
        weight: 2,
        opacity: 0.8,
        fillColor: '#f59e0b',
        fillOpacity: 0.15,
        className: 'all-region-boundaries'
    }};
    
    const layerOptions = {{...defaultOptions, ...options}};
    
    try {{
        const layer = L.geoJSON(window.REGION_BOUNDARIES, {{
            style: function(feature) {{
                // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤
                if (feature.properties.type === 'special_city') {{
                    return {{
                        ...layerOptions,
                        color: '#dc2626',
                        fillColor: '#dc2626'
                    }};
                }}
                return layerOptions;
            }},
            onEachFeature: function(feature, layer) {{
                const props = feature.properties;
                let popupContent = `<b>${{props.name}}</b><br>`;
                
                if (props.population) {{
                    popupContent += `–ù–∞—Å–µ–ª–µ–Ω–Ω—è: ${{parseInt(props.population).toLocaleString('uk-UA')}}<br>`;
                }}
                
                if (props.type === 'special_city') {{
                    popupContent += `<em>–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å</em>`;
                }}
                
                layer.bindPopup(popupContent);
                
                // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                layer.on('mouseover', function(e) {{
                    e.target.setStyle({{
                        weight: 3,
                        opacity: 1,
                        fillOpacity: 0.4
                    }});
                }});
                
                layer.on('mouseout', function(e) {{
                    e.target.setStyle(e.target.options.style || layerOptions);
                }});
            }}
        }});
        
        layer.addTo(map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
        if (!window.regionBoundaryLayers) {{
            window.regionBoundaryLayers = {{}};
        }}
        window.regionBoundaryLayers['_all_regions'] = layer;
        
        console.log('–ü–æ–∫–∞–∑–∞–Ω–æ –≥—Ä–∞–Ω–∏—Ü—ñ –≤—Å—ñ—Ö –æ–±–ª–∞—Å—Ç–µ–π');
        return layer;
        
    }} catch (error) {{
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –≤—Å—ñ—Ö –≥—Ä–∞–Ω–∏—Ü—å –æ–±–ª–∞—Å—Ç–µ–π:', error);
        return null;
    }}
}};

/**
 * –°–∫—Ä—ã—Ç—å –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–µ–π
 * @param {{Object}} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet
 */
window.hideAllRegionBoundaries = function(map) {{
    if (window.regionBoundaryLayers) {{
        Object.keys(window.regionBoundaryLayers).forEach(regionName => {{
            map.removeLayer(window.regionBoundaryLayers[regionName]);
        }});
        window.regionBoundaryLayers = {{}};
        console.log('–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ –≤—Å—ñ –≥—Ä–∞–Ω–∏—Ü—ñ –æ–±–ª–∞—Å—Ç–µ–π');
    }}
}};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
 * @returns {{Array}} –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –æ–±–ª–∞—Å—Ç–µ–π
 */
window.getAvailableRegions = function() {{
    if (!window.REGION_BOUNDARIES || !window.REGION_BOUNDARIES.features) {{
        return [];
    }}
    
    return window.REGION_BOUNDARIES.features.map(feature => feature.properties.name);
}};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
 * @param {{string}} regionName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
 * @returns {{boolean}} true –µ—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã
 */
window.hasRegionBoundary = function(regionName) {{
    return window.getRegionBoundary(regionName) !== null;
}};

/**
 * –ù–∞–π—Ç–∏ –æ–±–ª–∞—Å—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
 * @param {{string}} cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {{string|null}} –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ null
 */
window.findRegionByCity = function(cityName) {{
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å –æ–±–ª–∞—Å—Ç—è–º–∏
    const cityToRegion = {{
        '–ö–∏—ó–≤': '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–•–∞—Ä–∫—ñ–≤': '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 
        '–û–¥–µ—Å–∞': '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–î–Ω—ñ–ø—Ä–æ': '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–õ—å–≤—ñ–≤': '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ó–∞–ø–æ—Ä—ñ–∂–∂—è': '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–í—ñ–Ω–Ω–∏—Ü—è': '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–õ—É—Ü—å–∫': '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ñ–∏—Ç–æ–º–∏—Ä': '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–£–∂–≥–æ—Ä–æ–¥': '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫': '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π': '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–õ—É–≥–∞–Ω—Å—å–∫': '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ú–∏–∫–æ–ª–∞—ó–≤': '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ü–æ–ª—Ç–∞–≤–∞': '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–†—ñ–≤–Ω–µ': '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–°—É–º–∏': '–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å': '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–•–µ—Ä—Å–æ–Ω': '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π': '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ß–µ—Ä–∫–∞—Å–∏': '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ': '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ß–µ—Ä–Ω—ñ–≥—ñ–≤': '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
    }};
    
    return cityToRegion[cityName] || null;
}};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
console.log('‚úì –ú–æ–¥—É–ª—å –≥—Ä–∞–Ω–∏—Ü—å –æ–±–ª–∞—Å—Ç–µ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
console.log('–î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä–∞–Ω–∏—Ü—ñ –¥–ª—è –æ–±–ª–∞—Å—Ç–µ–π:', window.getAvailableRegions());
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JavaScript —Ñ–∞–π–ª
    with open('static/region_boundaries.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print("‚úì JavaScript —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: static/region_boundaries.js")
    
    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤ –∫–æ—Ä–Ω–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    with open('region_boundaries.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print("‚úì –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: region_boundaries.js")
    
    return len(boundaries_data['features'])

def create_regions_list():
    """
    –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    """
    geojson_file = 'ukraine_regions_boundaries.geojson'
    
    if not os.path.exists(geojson_file):
        print(f"–§–∞–π–ª {geojson_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(geojson_file, 'r', encoding='utf-8') as f:
        boundaries_data = json.load(f)
    
    regions = []
    for feature in boundaries_data['features']:
        props = feature['properties']
        region_info = {
            'name': props['name'],
            'name_uk': props.get('name_uk', props['name']),
            'population': props.get('population'),
            'osm_id': props.get('osm_id'),
            'admin_level': props.get('admin_level'),
            'type': props.get('type', 'region'),
            'bounds': props.get('bounds')
        }
        regions.append(region_info)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    regions.sort(key=lambda x: x['name'])
    
    with open('regions_with_boundaries.json', 'w', encoding='utf-8') as f:
        json.dump(regions, f, ensure_ascii=False, indent=2)
    
    print(f"‚úì –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —Å–æ–∑–¥–∞–Ω: regions_with_boundaries.json ({len(regions)} –æ–±–ª–∞—Å—Ç–µ–π)")

def main():
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü –æ–±–ª–∞—Å—Ç–µ–π ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('static'):
        os.makedirs('static')
        print("‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ static/")
    
    regions_count = create_regions_boundaries_js()
    create_regions_list()
    
    print(f"\\n=== –ì–æ—Ç–æ–≤–æ! ===")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: {regions_count}")
    print("\\n–§–∞–π–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("1. static/region_boundaries.js - –¥–ª—è production")
    print("2. region_boundaries.js - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("3. regions_with_boundaries.json - —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π")
    
    print("\\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ index.html:")
    print("1. –î–æ–±–∞–≤—å—Ç–µ <script src='static/region_boundaries.js'></script>")
    print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   - addRegionBoundaryToMap(map, '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å')")
    print("   - showAllRegionBoundaries(map)")
    print("   - getRegionBoundary('–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å')")

if __name__ == "__main__":
    main()
